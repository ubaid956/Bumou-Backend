"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompleteContinuouslyPushResponseBody = exports.CompleteContinuouslyPushRequest = exports.CheckDevicesResponse = exports.CheckDevicesResponseBody = exports.CheckDevicesRequest = exports.CheckDeviceResponse = exports.CheckDeviceResponseBody = exports.CheckDeviceRequest = exports.CheckCertificateResponse = exports.CheckCertificateResponseBody = exports.CheckCertificateRequest = exports.CancelPushResponse = exports.CancelPushResponseBody = exports.CancelPushRequest = exports.BindTagResponse = exports.BindTagResponseBody = exports.BindTagRequest = exports.BindPhoneResponse = exports.BindPhoneResponseBody = exports.BindPhoneRequest = exports.BindAliasResponse = exports.BindAliasResponseBody = exports.BindAliasRequest = exports.QueryUniqueDeviceStatResponseBodyAppDeviceStats = exports.QueryUniqueDeviceStatResponseBodyAppDeviceStatsAppDeviceStat = exports.QueryTagsResponseBodyTagInfos = exports.QueryTagsResponseBodyTagInfosTagInfo = exports.QueryPushStatByMsgResponseBodyPushStats = exports.QueryPushStatByMsgResponseBodyPushStatsPushStat = exports.QueryPushStatByAppResponseBodyAppPushStats = exports.QueryPushStatByAppResponseBodyAppPushStatsAppPushStat = exports.QueryPushRecordsResponseBodyPushInfos = exports.QueryPushRecordsResponseBodyPushInfosPushInfo = exports.QueryDevicesByAliasResponseBodyDeviceIds = exports.QueryDevicesByAccountResponseBodyDeviceIds = exports.QueryDeviceStatResponseBodyAppDeviceStats = exports.QueryDeviceStatResponseBodyAppDeviceStatsAppDeviceStat = exports.QueryDeviceInfoResponseBodyDeviceInfo = exports.QueryAliasesResponseBodyAliasInfos = exports.QueryAliasesResponseBodyAliasInfosAliasInfo = exports.MassPushResponseBodyMessageIds = exports.MassPushRequestPushTask = exports.ListTagsResponseBodyTagInfos = exports.ListTagsResponseBodyTagInfosTagInfo = exports.ListSummaryAppsResponseBodySummaryAppInfos = exports.ListSummaryAppsResponseBodySummaryAppInfosSummaryAppInfo = exports.CheckDevicesResponseBodyDeviceCheckInfos = exports.CheckDevicesResponseBodyDeviceCheckInfosDeviceCheckInfo = exports.CheckCertificateResponseBodyProductionCertInfo = exports.CheckCertificateResponseBodyDevelopmentCertInfo = void 0;
exports.QueryPushStatByMsgResponseBody = exports.QueryPushStatByMsgRequest = exports.QueryPushStatByAppResponse = exports.QueryPushStatByAppResponseBody = exports.QueryPushStatByAppRequest = exports.QueryPushRecordsResponse = exports.QueryPushRecordsResponseBody = exports.QueryPushRecordsRequest = exports.QueryDevicesByAliasResponse = exports.QueryDevicesByAliasResponseBody = exports.QueryDevicesByAliasRequest = exports.QueryDevicesByAccountResponse = exports.QueryDevicesByAccountResponseBody = exports.QueryDevicesByAccountRequest = exports.QueryDeviceStatResponse = exports.QueryDeviceStatResponseBody = exports.QueryDeviceStatRequest = exports.QueryDeviceInfoResponse = exports.QueryDeviceInfoResponseBody = exports.QueryDeviceInfoRequest = exports.QueryAliasesResponse = exports.QueryAliasesResponseBody = exports.QueryAliasesRequest = exports.PushNoticeToiOSResponse = exports.PushNoticeToiOSResponseBody = exports.PushNoticeToiOSRequest = exports.PushNoticeToAndroidResponse = exports.PushNoticeToAndroidResponseBody = exports.PushNoticeToAndroidRequest = exports.PushMessageToiOSResponse = exports.PushMessageToiOSResponseBody = exports.PushMessageToiOSRequest = exports.PushMessageToAndroidResponse = exports.PushMessageToAndroidResponseBody = exports.PushMessageToAndroidRequest = exports.PushResponse = exports.PushResponseBody = exports.PushRequest = exports.MassPushResponse = exports.MassPushResponseBody = exports.MassPushRequest = exports.ListTagsResponse = exports.ListTagsResponseBody = exports.ListTagsRequest = exports.ListSummaryAppsResponse = exports.ListSummaryAppsResponseBody = exports.ContinuouslyPushResponse = exports.ContinuouslyPushResponseBody = exports.ContinuouslyPushRequest = exports.CompleteContinuouslyPushResponse = void 0;
exports.UnbindTagResponse = exports.UnbindTagResponseBody = exports.UnbindTagRequest = exports.UnbindPhoneResponse = exports.UnbindPhoneResponseBody = exports.UnbindPhoneRequest = exports.UnbindAliasResponse = exports.UnbindAliasResponseBody = exports.UnbindAliasRequest = exports.RemoveTagResponse = exports.RemoveTagResponseBody = exports.RemoveTagRequest = exports.QueryUniqueDeviceStatResponse = exports.QueryUniqueDeviceStatResponseBody = exports.QueryUniqueDeviceStatRequest = exports.QueryTagsResponse = exports.QueryTagsResponseBody = exports.QueryTagsRequest = exports.QueryPushStatByMsgResponse = void 0;
// This file is auto-generated, don't edit it
/**
 */
const openapi_core_1 = __importDefault(require("@alicloud/openapi-core"));
const openapi_core_2 = require("@alicloud/openapi-core");
const $dara = __importStar(require("@darabonba/typescript"));
class CheckCertificateResponseBodyDevelopmentCertInfo extends $dara.Model {
    static names() {
        return {
            exipreTime: 'ExipreTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            exipreTime: 'number',
            status: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckCertificateResponseBodyDevelopmentCertInfo = CheckCertificateResponseBodyDevelopmentCertInfo;
class CheckCertificateResponseBodyProductionCertInfo extends $dara.Model {
    static names() {
        return {
            exipreTime: 'ExipreTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            exipreTime: 'number',
            status: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckCertificateResponseBodyProductionCertInfo = CheckCertificateResponseBodyProductionCertInfo;
class CheckDevicesResponseBodyDeviceCheckInfosDeviceCheckInfo extends $dara.Model {
    static names() {
        return {
            available: 'Available',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            available: 'boolean',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDevicesResponseBodyDeviceCheckInfosDeviceCheckInfo = CheckDevicesResponseBodyDeviceCheckInfosDeviceCheckInfo;
class CheckDevicesResponseBodyDeviceCheckInfos extends $dara.Model {
    static names() {
        return {
            deviceCheckInfo: 'DeviceCheckInfo',
        };
    }
    static types() {
        return {
            deviceCheckInfo: { 'type': 'array', 'itemType': CheckDevicesResponseBodyDeviceCheckInfosDeviceCheckInfo },
        };
    }
    validate() {
        if (Array.isArray(this.deviceCheckInfo)) {
            $dara.Model.validateArray(this.deviceCheckInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDevicesResponseBodyDeviceCheckInfos = CheckDevicesResponseBodyDeviceCheckInfos;
class ListSummaryAppsResponseBodySummaryAppInfosSummaryAppInfo extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            appName: 'AppName',
        };
    }
    static types() {
        return {
            appKey: 'number',
            appName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSummaryAppsResponseBodySummaryAppInfosSummaryAppInfo = ListSummaryAppsResponseBodySummaryAppInfosSummaryAppInfo;
class ListSummaryAppsResponseBodySummaryAppInfos extends $dara.Model {
    static names() {
        return {
            summaryAppInfo: 'SummaryAppInfo',
        };
    }
    static types() {
        return {
            summaryAppInfo: { 'type': 'array', 'itemType': ListSummaryAppsResponseBodySummaryAppInfosSummaryAppInfo },
        };
    }
    validate() {
        if (Array.isArray(this.summaryAppInfo)) {
            $dara.Model.validateArray(this.summaryAppInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSummaryAppsResponseBodySummaryAppInfos = ListSummaryAppsResponseBodySummaryAppInfos;
class ListTagsResponseBodyTagInfosTagInfo extends $dara.Model {
    static names() {
        return {
            tagName: 'TagName',
        };
    }
    static types() {
        return {
            tagName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTagsResponseBodyTagInfosTagInfo = ListTagsResponseBodyTagInfosTagInfo;
class ListTagsResponseBodyTagInfos extends $dara.Model {
    static names() {
        return {
            tagInfo: 'TagInfo',
        };
    }
    static types() {
        return {
            tagInfo: { 'type': 'array', 'itemType': ListTagsResponseBodyTagInfosTagInfo },
        };
    }
    validate() {
        if (Array.isArray(this.tagInfo)) {
            $dara.Model.validateArray(this.tagInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTagsResponseBodyTagInfos = ListTagsResponseBodyTagInfos;
class MassPushRequestPushTask extends $dara.Model {
    static names() {
        return {
            androidActivity: 'AndroidActivity',
            androidBadgeAddNum: 'AndroidBadgeAddNum',
            androidBadgeClass: 'AndroidBadgeClass',
            androidBadgeSetNum: 'AndroidBadgeSetNum',
            androidBigBody: 'AndroidBigBody',
            androidBigPictureUrl: 'AndroidBigPictureUrl',
            androidBigTitle: 'AndroidBigTitle',
            androidExtParameters: 'AndroidExtParameters',
            androidHonorTargetUserType: 'AndroidHonorTargetUserType',
            androidHuaweiReceiptId: 'AndroidHuaweiReceiptId',
            androidHuaweiTargetUserType: 'AndroidHuaweiTargetUserType',
            androidImageUrl: 'AndroidImageUrl',
            androidInboxBody: 'AndroidInboxBody',
            androidMessageHuaweiCategory: 'AndroidMessageHuaweiCategory',
            androidMessageHuaweiUrgency: 'AndroidMessageHuaweiUrgency',
            androidMessageOppoCategory: 'AndroidMessageOppoCategory',
            androidMessageOppoNotifyLevel: 'AndroidMessageOppoNotifyLevel',
            androidMessageVivoCategory: 'AndroidMessageVivoCategory',
            androidMusic: 'AndroidMusic',
            androidNotificationBarPriority: 'AndroidNotificationBarPriority',
            androidNotificationBarType: 'AndroidNotificationBarType',
            androidNotificationChannel: 'AndroidNotificationChannel',
            androidNotificationGroup: 'AndroidNotificationGroup',
            androidNotificationHonorChannel: 'AndroidNotificationHonorChannel',
            androidNotificationHuaweiChannel: 'AndroidNotificationHuaweiChannel',
            androidNotificationNotifyId: 'AndroidNotificationNotifyId',
            androidNotificationThreadId: 'AndroidNotificationThreadId',
            androidNotificationVivoChannel: 'AndroidNotificationVivoChannel',
            androidNotificationXiaomiChannel: 'AndroidNotificationXiaomiChannel',
            androidNotifyType: 'AndroidNotifyType',
            androidOpenType: 'AndroidOpenType',
            androidOpenUrl: 'AndroidOpenUrl',
            androidPopupActivity: 'AndroidPopupActivity',
            androidPopupBody: 'AndroidPopupBody',
            androidPopupTitle: 'AndroidPopupTitle',
            androidRemind: 'AndroidRemind',
            androidRenderStyle: 'AndroidRenderStyle',
            androidTargetUserType: 'AndroidTargetUserType',
            androidVivoPushMode: 'AndroidVivoPushMode',
            androidVivoReceiptId: 'AndroidVivoReceiptId',
            androidXiaoMiActivity: 'AndroidXiaoMiActivity',
            androidXiaoMiNotifyBody: 'AndroidXiaoMiNotifyBody',
            androidXiaoMiNotifyTitle: 'AndroidXiaoMiNotifyTitle',
            androidXiaomiBigPictureUrl: 'AndroidXiaomiBigPictureUrl',
            androidXiaomiImageUrl: 'AndroidXiaomiImageUrl',
            body: 'Body',
            deviceType: 'DeviceType',
            expireTime: 'ExpireTime',
            harmonyAction: 'HarmonyAction',
            harmonyActionType: 'HarmonyActionType',
            harmonyBadgeAddNum: 'HarmonyBadgeAddNum',
            harmonyBadgeSetNum: 'HarmonyBadgeSetNum',
            harmonyCategory: 'HarmonyCategory',
            harmonyExtParameters: 'HarmonyExtParameters',
            harmonyExtensionExtraData: 'HarmonyExtensionExtraData',
            harmonyExtensionPush: 'HarmonyExtensionPush',
            harmonyImageUrl: 'HarmonyImageUrl',
            harmonyInboxContent: 'HarmonyInboxContent',
            harmonyNotificationSlotType: 'HarmonyNotificationSlotType',
            harmonyNotifyId: 'HarmonyNotifyId',
            harmonyReceiptId: 'HarmonyReceiptId',
            harmonyRemind: 'HarmonyRemind',
            harmonyRemindBody: 'HarmonyRemindBody',
            harmonyRemindTitle: 'HarmonyRemindTitle',
            harmonyRenderStyle: 'HarmonyRenderStyle',
            harmonyTestMessage: 'HarmonyTestMessage',
            harmonyUri: 'HarmonyUri',
            jobKey: 'JobKey',
            pushTime: 'PushTime',
            pushType: 'PushType',
            sendChannels: 'SendChannels',
            sendSpeed: 'SendSpeed',
            storeOffline: 'StoreOffline',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
            trim: 'Trim',
            iOSApnsEnv: 'iOSApnsEnv',
            iOSBadge: 'iOSBadge',
            iOSBadgeAutoIncrement: 'iOSBadgeAutoIncrement',
            iOSExtParameters: 'iOSExtParameters',
            iOSInterruptionLevel: 'iOSInterruptionLevel',
            iOSLiveActivityAttributes: 'iOSLiveActivityAttributes',
            iOSLiveActivityAttributesType: 'iOSLiveActivityAttributesType',
            iOSLiveActivityContentState: 'iOSLiveActivityContentState',
            iOSLiveActivityDismissalDate: 'iOSLiveActivityDismissalDate',
            iOSLiveActivityEvent: 'iOSLiveActivityEvent',
            iOSLiveActivityId: 'iOSLiveActivityId',
            iOSLiveActivityStaleDate: 'iOSLiveActivityStaleDate',
            iOSMusic: 'iOSMusic',
            iOSMutableContent: 'iOSMutableContent',
            iOSNotificationCategory: 'iOSNotificationCategory',
            iOSNotificationCollapseId: 'iOSNotificationCollapseId',
            iOSNotificationThreadId: 'iOSNotificationThreadId',
            iOSRelevanceScore: 'iOSRelevanceScore',
            iOSRemind: 'iOSRemind',
            iOSRemindBody: 'iOSRemindBody',
            iOSSilentNotification: 'iOSSilentNotification',
            iOSSubtitle: 'iOSSubtitle',
        };
    }
    static types() {
        return {
            androidActivity: 'string',
            androidBadgeAddNum: 'number',
            androidBadgeClass: 'string',
            androidBadgeSetNum: 'number',
            androidBigBody: 'string',
            androidBigPictureUrl: 'string',
            androidBigTitle: 'string',
            androidExtParameters: 'string',
            androidHonorTargetUserType: 'number',
            androidHuaweiReceiptId: 'string',
            androidHuaweiTargetUserType: 'number',
            androidImageUrl: 'string',
            androidInboxBody: 'string',
            androidMessageHuaweiCategory: 'string',
            androidMessageHuaweiUrgency: 'string',
            androidMessageOppoCategory: 'string',
            androidMessageOppoNotifyLevel: 'number',
            androidMessageVivoCategory: 'string',
            androidMusic: 'string',
            androidNotificationBarPriority: 'number',
            androidNotificationBarType: 'number',
            androidNotificationChannel: 'string',
            androidNotificationGroup: 'string',
            androidNotificationHonorChannel: 'string',
            androidNotificationHuaweiChannel: 'string',
            androidNotificationNotifyId: 'number',
            androidNotificationThreadId: 'string',
            androidNotificationVivoChannel: 'string',
            androidNotificationXiaomiChannel: 'string',
            androidNotifyType: 'string',
            androidOpenType: 'string',
            androidOpenUrl: 'string',
            androidPopupActivity: 'string',
            androidPopupBody: 'string',
            androidPopupTitle: 'string',
            androidRemind: 'boolean',
            androidRenderStyle: 'string',
            androidTargetUserType: 'number',
            androidVivoPushMode: 'number',
            androidVivoReceiptId: 'string',
            androidXiaoMiActivity: 'string',
            androidXiaoMiNotifyBody: 'string',
            androidXiaoMiNotifyTitle: 'string',
            androidXiaomiBigPictureUrl: 'string',
            androidXiaomiImageUrl: 'string',
            body: 'string',
            deviceType: 'string',
            expireTime: 'string',
            harmonyAction: 'string',
            harmonyActionType: 'string',
            harmonyBadgeAddNum: 'number',
            harmonyBadgeSetNum: 'number',
            harmonyCategory: 'string',
            harmonyExtParameters: 'string',
            harmonyExtensionExtraData: 'string',
            harmonyExtensionPush: 'boolean',
            harmonyImageUrl: 'string',
            harmonyInboxContent: 'string',
            harmonyNotificationSlotType: 'string',
            harmonyNotifyId: 'number',
            harmonyReceiptId: 'string',
            harmonyRemind: 'boolean',
            harmonyRemindBody: 'string',
            harmonyRemindTitle: 'string',
            harmonyRenderStyle: 'string',
            harmonyTestMessage: 'boolean',
            harmonyUri: 'string',
            jobKey: 'string',
            pushTime: 'string',
            pushType: 'string',
            sendChannels: 'string',
            sendSpeed: 'number',
            storeOffline: 'boolean',
            target: 'string',
            targetValue: 'string',
            title: 'string',
            trim: 'boolean',
            iOSApnsEnv: 'string',
            iOSBadge: 'number',
            iOSBadgeAutoIncrement: 'boolean',
            iOSExtParameters: 'string',
            iOSInterruptionLevel: 'string',
            iOSLiveActivityAttributes: 'string',
            iOSLiveActivityAttributesType: 'string',
            iOSLiveActivityContentState: 'string',
            iOSLiveActivityDismissalDate: 'number',
            iOSLiveActivityEvent: 'string',
            iOSLiveActivityId: 'string',
            iOSLiveActivityStaleDate: 'number',
            iOSMusic: 'string',
            iOSMutableContent: 'boolean',
            iOSNotificationCategory: 'string',
            iOSNotificationCollapseId: 'string',
            iOSNotificationThreadId: 'string',
            iOSRelevanceScore: 'number',
            iOSRemind: 'boolean',
            iOSRemindBody: 'string',
            iOSSilentNotification: 'boolean',
            iOSSubtitle: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.MassPushRequestPushTask = MassPushRequestPushTask;
class MassPushResponseBodyMessageIds extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            messageId: { 'type': 'array', 'itemType': 'string' },
        };
    }
    validate() {
        if (Array.isArray(this.messageId)) {
            $dara.Model.validateArray(this.messageId);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.MassPushResponseBodyMessageIds = MassPushResponseBodyMessageIds;
class QueryAliasesResponseBodyAliasInfosAliasInfo extends $dara.Model {
    static names() {
        return {
            aliasName: 'AliasName',
        };
    }
    static types() {
        return {
            aliasName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAliasesResponseBodyAliasInfosAliasInfo = QueryAliasesResponseBodyAliasInfosAliasInfo;
class QueryAliasesResponseBodyAliasInfos extends $dara.Model {
    static names() {
        return {
            aliasInfo: 'AliasInfo',
        };
    }
    static types() {
        return {
            aliasInfo: { 'type': 'array', 'itemType': QueryAliasesResponseBodyAliasInfosAliasInfo },
        };
    }
    validate() {
        if (Array.isArray(this.aliasInfo)) {
            $dara.Model.validateArray(this.aliasInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAliasesResponseBodyAliasInfos = QueryAliasesResponseBodyAliasInfos;
class QueryDeviceInfoResponseBodyDeviceInfo extends $dara.Model {
    static names() {
        return {
            account: 'Account',
            alias: 'Alias',
            brand: 'Brand',
            deviceId: 'DeviceId',
            deviceToken: 'DeviceToken',
            deviceType: 'DeviceType',
            lastOnlineTime: 'LastOnlineTime',
            model: 'Model',
            online: 'Online',
            phoneNumber: 'PhoneNumber',
            pushEnabled: 'PushEnabled',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            account: 'string',
            alias: 'string',
            brand: 'string',
            deviceId: 'string',
            deviceToken: 'string',
            deviceType: 'string',
            lastOnlineTime: 'string',
            model: 'string',
            online: 'boolean',
            phoneNumber: 'string',
            pushEnabled: 'boolean',
            tags: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceInfoResponseBodyDeviceInfo = QueryDeviceInfoResponseBodyDeviceInfo;
class QueryDeviceStatResponseBodyAppDeviceStatsAppDeviceStat extends $dara.Model {
    static names() {
        return {
            count: 'Count',
            deviceType: 'DeviceType',
            time: 'Time',
        };
    }
    static types() {
        return {
            count: 'number',
            deviceType: 'string',
            time: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceStatResponseBodyAppDeviceStatsAppDeviceStat = QueryDeviceStatResponseBodyAppDeviceStatsAppDeviceStat;
class QueryDeviceStatResponseBodyAppDeviceStats extends $dara.Model {
    static names() {
        return {
            appDeviceStat: 'AppDeviceStat',
        };
    }
    static types() {
        return {
            appDeviceStat: { 'type': 'array', 'itemType': QueryDeviceStatResponseBodyAppDeviceStatsAppDeviceStat },
        };
    }
    validate() {
        if (Array.isArray(this.appDeviceStat)) {
            $dara.Model.validateArray(this.appDeviceStat);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceStatResponseBodyAppDeviceStats = QueryDeviceStatResponseBodyAppDeviceStats;
class QueryDevicesByAccountResponseBodyDeviceIds extends $dara.Model {
    static names() {
        return {
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            deviceId: { 'type': 'array', 'itemType': 'string' },
        };
    }
    validate() {
        if (Array.isArray(this.deviceId)) {
            $dara.Model.validateArray(this.deviceId);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAccountResponseBodyDeviceIds = QueryDevicesByAccountResponseBodyDeviceIds;
class QueryDevicesByAliasResponseBodyDeviceIds extends $dara.Model {
    static names() {
        return {
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            deviceId: { 'type': 'array', 'itemType': 'string' },
        };
    }
    validate() {
        if (Array.isArray(this.deviceId)) {
            $dara.Model.validateArray(this.deviceId);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAliasResponseBodyDeviceIds = QueryDevicesByAliasResponseBodyDeviceIds;
class QueryPushRecordsResponseBodyPushInfosPushInfo extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            body: 'Body',
            deviceType: 'DeviceType',
            messageId: 'MessageId',
            pushTime: 'PushTime',
            pushType: 'PushType',
            source: 'Source',
            status: 'Status',
            target: 'Target',
            title: 'Title',
        };
    }
    static types() {
        return {
            appKey: 'number',
            body: 'string',
            deviceType: 'string',
            messageId: 'string',
            pushTime: 'string',
            pushType: 'string',
            source: 'string',
            status: 'string',
            target: 'string',
            title: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushRecordsResponseBodyPushInfosPushInfo = QueryPushRecordsResponseBodyPushInfosPushInfo;
class QueryPushRecordsResponseBodyPushInfos extends $dara.Model {
    static names() {
        return {
            pushInfo: 'PushInfo',
        };
    }
    static types() {
        return {
            pushInfo: { 'type': 'array', 'itemType': QueryPushRecordsResponseBodyPushInfosPushInfo },
        };
    }
    validate() {
        if (Array.isArray(this.pushInfo)) {
            $dara.Model.validateArray(this.pushInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushRecordsResponseBodyPushInfos = QueryPushRecordsResponseBodyPushInfos;
class QueryPushStatByAppResponseBodyAppPushStatsAppPushStat extends $dara.Model {
    static names() {
        return {
            acceptCount: 'AcceptCount',
            deletedCount: 'DeletedCount',
            openedCount: 'OpenedCount',
            receivedCount: 'ReceivedCount',
            sentCount: 'SentCount',
            smsFailedCount: 'SmsFailedCount',
            smsReceiveFailedCount: 'SmsReceiveFailedCount',
            smsReceiveSuccessCount: 'SmsReceiveSuccessCount',
            smsSentCount: 'SmsSentCount',
            smsSkipCount: 'SmsSkipCount',
            time: 'Time',
        };
    }
    static types() {
        return {
            acceptCount: 'number',
            deletedCount: 'number',
            openedCount: 'number',
            receivedCount: 'number',
            sentCount: 'number',
            smsFailedCount: 'number',
            smsReceiveFailedCount: 'number',
            smsReceiveSuccessCount: 'number',
            smsSentCount: 'number',
            smsSkipCount: 'number',
            time: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByAppResponseBodyAppPushStatsAppPushStat = QueryPushStatByAppResponseBodyAppPushStatsAppPushStat;
class QueryPushStatByAppResponseBodyAppPushStats extends $dara.Model {
    static names() {
        return {
            appPushStat: 'AppPushStat',
        };
    }
    static types() {
        return {
            appPushStat: { 'type': 'array', 'itemType': QueryPushStatByAppResponseBodyAppPushStatsAppPushStat },
        };
    }
    validate() {
        if (Array.isArray(this.appPushStat)) {
            $dara.Model.validateArray(this.appPushStat);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByAppResponseBodyAppPushStats = QueryPushStatByAppResponseBodyAppPushStats;
class QueryPushStatByMsgResponseBodyPushStatsPushStat extends $dara.Model {
    static names() {
        return {
            acceptCount: 'AcceptCount',
            deletedCount: 'DeletedCount',
            messageId: 'MessageId',
            openedCount: 'OpenedCount',
            receivedCount: 'ReceivedCount',
            sentCount: 'SentCount',
            smsFailedCount: 'SmsFailedCount',
            smsReceiveFailedCount: 'SmsReceiveFailedCount',
            smsReceiveSuccessCount: 'SmsReceiveSuccessCount',
            smsSentCount: 'SmsSentCount',
            smsSkipCount: 'SmsSkipCount',
        };
    }
    static types() {
        return {
            acceptCount: 'number',
            deletedCount: 'number',
            messageId: 'string',
            openedCount: 'number',
            receivedCount: 'number',
            sentCount: 'number',
            smsFailedCount: 'number',
            smsReceiveFailedCount: 'number',
            smsReceiveSuccessCount: 'number',
            smsSentCount: 'number',
            smsSkipCount: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByMsgResponseBodyPushStatsPushStat = QueryPushStatByMsgResponseBodyPushStatsPushStat;
class QueryPushStatByMsgResponseBodyPushStats extends $dara.Model {
    static names() {
        return {
            pushStat: 'PushStat',
        };
    }
    static types() {
        return {
            pushStat: { 'type': 'array', 'itemType': QueryPushStatByMsgResponseBodyPushStatsPushStat },
        };
    }
    validate() {
        if (Array.isArray(this.pushStat)) {
            $dara.Model.validateArray(this.pushStat);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByMsgResponseBodyPushStats = QueryPushStatByMsgResponseBodyPushStats;
class QueryTagsResponseBodyTagInfosTagInfo extends $dara.Model {
    static names() {
        return {
            tagName: 'TagName',
        };
    }
    static types() {
        return {
            tagName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTagsResponseBodyTagInfosTagInfo = QueryTagsResponseBodyTagInfosTagInfo;
class QueryTagsResponseBodyTagInfos extends $dara.Model {
    static names() {
        return {
            tagInfo: 'TagInfo',
        };
    }
    static types() {
        return {
            tagInfo: { 'type': 'array', 'itemType': QueryTagsResponseBodyTagInfosTagInfo },
        };
    }
    validate() {
        if (Array.isArray(this.tagInfo)) {
            $dara.Model.validateArray(this.tagInfo);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTagsResponseBodyTagInfos = QueryTagsResponseBodyTagInfos;
class QueryUniqueDeviceStatResponseBodyAppDeviceStatsAppDeviceStat extends $dara.Model {
    static names() {
        return {
            count: 'Count',
            time: 'Time',
        };
    }
    static types() {
        return {
            count: 'number',
            time: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniqueDeviceStatResponseBodyAppDeviceStatsAppDeviceStat = QueryUniqueDeviceStatResponseBodyAppDeviceStatsAppDeviceStat;
class QueryUniqueDeviceStatResponseBodyAppDeviceStats extends $dara.Model {
    static names() {
        return {
            appDeviceStat: 'AppDeviceStat',
        };
    }
    static types() {
        return {
            appDeviceStat: { 'type': 'array', 'itemType': QueryUniqueDeviceStatResponseBodyAppDeviceStatsAppDeviceStat },
        };
    }
    validate() {
        if (Array.isArray(this.appDeviceStat)) {
            $dara.Model.validateArray(this.appDeviceStat);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniqueDeviceStatResponseBodyAppDeviceStats = QueryUniqueDeviceStatResponseBodyAppDeviceStats;
class BindAliasRequest extends $dara.Model {
    static names() {
        return {
            aliasName: 'AliasName',
            appKey: 'AppKey',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            appKey: 'number',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindAliasRequest = BindAliasRequest;
class BindAliasResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindAliasResponseBody = BindAliasResponseBody;
class BindAliasResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BindAliasResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindAliasResponse = BindAliasResponse;
class BindPhoneRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceId: 'DeviceId',
            phoneNumber: 'PhoneNumber',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceId: 'string',
            phoneNumber: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindPhoneRequest = BindPhoneRequest;
class BindPhoneResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindPhoneResponseBody = BindPhoneResponseBody;
class BindPhoneResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BindPhoneResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindPhoneResponse = BindPhoneResponse;
class BindTagRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            clientKey: 'ClientKey',
            keyType: 'KeyType',
            tagName: 'TagName',
        };
    }
    static types() {
        return {
            appKey: 'number',
            clientKey: 'string',
            keyType: 'string',
            tagName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindTagRequest = BindTagRequest;
class BindTagResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindTagResponseBody = BindTagResponseBody;
class BindTagResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BindTagResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.BindTagResponse = BindTagResponse;
class CancelPushRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            messageId: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelPushRequest = CancelPushRequest;
class CancelPushResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelPushResponseBody = CancelPushResponseBody;
class CancelPushResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelPushResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelPushResponse = CancelPushResponse;
class CheckCertificateRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
        };
    }
    static types() {
        return {
            appKey: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckCertificateRequest = CheckCertificateRequest;
class CheckCertificateResponseBody extends $dara.Model {
    static names() {
        return {
            android: 'Android',
            developmentCertInfo: 'DevelopmentCertInfo',
            IOS: 'IOS',
            productionCertInfo: 'ProductionCertInfo',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            android: 'boolean',
            developmentCertInfo: CheckCertificateResponseBodyDevelopmentCertInfo,
            IOS: 'boolean',
            productionCertInfo: CheckCertificateResponseBodyProductionCertInfo,
            requestId: 'string',
        };
    }
    validate() {
        if (this.developmentCertInfo && typeof this.developmentCertInfo.validate === 'function') {
            this.developmentCertInfo.validate();
        }
        if (this.productionCertInfo && typeof this.productionCertInfo.validate === 'function') {
            this.productionCertInfo.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckCertificateResponseBody = CheckCertificateResponseBody;
class CheckCertificateResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckCertificateResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckCertificateResponse = CheckCertificateResponse;
class CheckDeviceRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDeviceRequest = CheckDeviceRequest;
class CheckDeviceResponseBody extends $dara.Model {
    static names() {
        return {
            available: 'Available',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            available: 'boolean',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDeviceResponseBody = CheckDeviceResponseBody;
class CheckDeviceResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckDeviceResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDeviceResponse = CheckDeviceResponse;
class CheckDevicesRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceIds: 'DeviceIds',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceIds: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDevicesRequest = CheckDevicesRequest;
class CheckDevicesResponseBody extends $dara.Model {
    static names() {
        return {
            deviceCheckInfos: 'DeviceCheckInfos',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            deviceCheckInfos: CheckDevicesResponseBodyDeviceCheckInfos,
            requestId: 'string',
        };
    }
    validate() {
        if (this.deviceCheckInfos && typeof this.deviceCheckInfos.validate === 'function') {
            this.deviceCheckInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDevicesResponseBody = CheckDevicesResponseBody;
class CheckDevicesResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckDevicesResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckDevicesResponse = CheckDevicesResponse;
class CompleteContinuouslyPushRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            messageId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CompleteContinuouslyPushRequest = CompleteContinuouslyPushRequest;
class CompleteContinuouslyPushResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CompleteContinuouslyPushResponseBody = CompleteContinuouslyPushResponseBody;
class CompleteContinuouslyPushResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CompleteContinuouslyPushResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.CompleteContinuouslyPushResponse = CompleteContinuouslyPushResponse;
class ContinuouslyPushRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            messageId: 'MessageId',
            target: 'Target',
            targetValue: 'TargetValue',
        };
    }
    static types() {
        return {
            appKey: 'number',
            messageId: 'string',
            target: 'string',
            targetValue: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ContinuouslyPushRequest = ContinuouslyPushRequest;
class ContinuouslyPushResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ContinuouslyPushResponseBody = ContinuouslyPushResponseBody;
class ContinuouslyPushResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ContinuouslyPushResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ContinuouslyPushResponse = ContinuouslyPushResponse;
class ListSummaryAppsResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
            summaryAppInfos: 'SummaryAppInfos',
        };
    }
    static types() {
        return {
            requestId: 'string',
            summaryAppInfos: ListSummaryAppsResponseBodySummaryAppInfos,
        };
    }
    validate() {
        if (this.summaryAppInfos && typeof this.summaryAppInfos.validate === 'function') {
            this.summaryAppInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSummaryAppsResponseBody = ListSummaryAppsResponseBody;
class ListSummaryAppsResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListSummaryAppsResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSummaryAppsResponse = ListSummaryAppsResponse;
class ListTagsRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
        };
    }
    static types() {
        return {
            appKey: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTagsRequest = ListTagsRequest;
class ListTagsResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
            tagInfos: 'TagInfos',
        };
    }
    static types() {
        return {
            requestId: 'string',
            tagInfos: ListTagsResponseBodyTagInfos,
        };
    }
    validate() {
        if (this.tagInfos && typeof this.tagInfos.validate === 'function') {
            this.tagInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTagsResponseBody = ListTagsResponseBody;
class ListTagsResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTagsResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTagsResponse = ListTagsResponse;
class MassPushRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            idempotentToken: 'IdempotentToken',
            pushTask: 'PushTask',
        };
    }
    static types() {
        return {
            appKey: 'number',
            idempotentToken: 'string',
            pushTask: { 'type': 'array', 'itemType': MassPushRequestPushTask },
        };
    }
    validate() {
        if (Array.isArray(this.pushTask)) {
            $dara.Model.validateArray(this.pushTask);
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.MassPushRequest = MassPushRequest;
class MassPushResponseBody extends $dara.Model {
    static names() {
        return {
            messageIds: 'MessageIds',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageIds: MassPushResponseBodyMessageIds,
            requestId: 'string',
        };
    }
    validate() {
        if (this.messageIds && typeof this.messageIds.validate === 'function') {
            this.messageIds.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.MassPushResponseBody = MassPushResponseBody;
class MassPushResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MassPushResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.MassPushResponse = MassPushResponse;
class PushRequest extends $dara.Model {
    static names() {
        return {
            androidActivity: 'AndroidActivity',
            androidBadgeAddNum: 'AndroidBadgeAddNum',
            androidBadgeClass: 'AndroidBadgeClass',
            androidBadgeSetNum: 'AndroidBadgeSetNum',
            androidBigBody: 'AndroidBigBody',
            androidBigPictureUrl: 'AndroidBigPictureUrl',
            androidBigTitle: 'AndroidBigTitle',
            androidExtParameters: 'AndroidExtParameters',
            androidHonorTargetUserType: 'AndroidHonorTargetUserType',
            androidHuaweiReceiptId: 'AndroidHuaweiReceiptId',
            androidHuaweiTargetUserType: 'AndroidHuaweiTargetUserType',
            androidImageUrl: 'AndroidImageUrl',
            androidInboxBody: 'AndroidInboxBody',
            androidMessageHuaweiCategory: 'AndroidMessageHuaweiCategory',
            androidMessageHuaweiUrgency: 'AndroidMessageHuaweiUrgency',
            androidMessageOppoCategory: 'AndroidMessageOppoCategory',
            androidMessageOppoNotifyLevel: 'AndroidMessageOppoNotifyLevel',
            androidMessageVivoCategory: 'AndroidMessageVivoCategory',
            androidMusic: 'AndroidMusic',
            androidNotificationBarPriority: 'AndroidNotificationBarPriority',
            androidNotificationBarType: 'AndroidNotificationBarType',
            androidNotificationChannel: 'AndroidNotificationChannel',
            androidNotificationGroup: 'AndroidNotificationGroup',
            androidNotificationHonorChannel: 'AndroidNotificationHonorChannel',
            androidNotificationHuaweiChannel: 'AndroidNotificationHuaweiChannel',
            androidNotificationNotifyId: 'AndroidNotificationNotifyId',
            androidNotificationThreadId: 'AndroidNotificationThreadId',
            androidNotificationVivoChannel: 'AndroidNotificationVivoChannel',
            androidNotificationXiaomiChannel: 'AndroidNotificationXiaomiChannel',
            androidNotifyType: 'AndroidNotifyType',
            androidOpenType: 'AndroidOpenType',
            androidOpenUrl: 'AndroidOpenUrl',
            androidPopupActivity: 'AndroidPopupActivity',
            androidPopupBody: 'AndroidPopupBody',
            androidPopupTitle: 'AndroidPopupTitle',
            androidRemind: 'AndroidRemind',
            androidRenderStyle: 'AndroidRenderStyle',
            androidTargetUserType: 'AndroidTargetUserType',
            androidVivoPushMode: 'AndroidVivoPushMode',
            androidVivoReceiptId: 'AndroidVivoReceiptId',
            androidXiaoMiActivity: 'AndroidXiaoMiActivity',
            androidXiaoMiNotifyBody: 'AndroidXiaoMiNotifyBody',
            androidXiaoMiNotifyTitle: 'AndroidXiaoMiNotifyTitle',
            androidXiaomiBigPictureUrl: 'AndroidXiaomiBigPictureUrl',
            androidXiaomiImageUrl: 'AndroidXiaomiImageUrl',
            appKey: 'AppKey',
            body: 'Body',
            deviceType: 'DeviceType',
            expireTime: 'ExpireTime',
            harmonyAction: 'HarmonyAction',
            harmonyActionType: 'HarmonyActionType',
            harmonyBadgeAddNum: 'HarmonyBadgeAddNum',
            harmonyBadgeSetNum: 'HarmonyBadgeSetNum',
            harmonyCategory: 'HarmonyCategory',
            harmonyExtParameters: 'HarmonyExtParameters',
            harmonyExtensionExtraData: 'HarmonyExtensionExtraData',
            harmonyExtensionPush: 'HarmonyExtensionPush',
            harmonyImageUrl: 'HarmonyImageUrl',
            harmonyInboxContent: 'HarmonyInboxContent',
            harmonyNotificationSlotType: 'HarmonyNotificationSlotType',
            harmonyNotifyId: 'HarmonyNotifyId',
            harmonyReceiptId: 'HarmonyReceiptId',
            harmonyRemind: 'HarmonyRemind',
            harmonyRemindBody: 'HarmonyRemindBody',
            harmonyRemindTitle: 'HarmonyRemindTitle',
            harmonyRenderStyle: 'HarmonyRenderStyle',
            harmonyTestMessage: 'HarmonyTestMessage',
            harmonyUri: 'HarmonyUri',
            idempotentToken: 'IdempotentToken',
            jobKey: 'JobKey',
            pushTime: 'PushTime',
            pushType: 'PushType',
            sendChannels: 'SendChannels',
            sendSpeed: 'SendSpeed',
            smsDelaySecs: 'SmsDelaySecs',
            smsParams: 'SmsParams',
            smsSendPolicy: 'SmsSendPolicy',
            smsSignName: 'SmsSignName',
            smsTemplateName: 'SmsTemplateName',
            storeOffline: 'StoreOffline',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
            trim: 'Trim',
            iOSApnsEnv: 'iOSApnsEnv',
            iOSBadge: 'iOSBadge',
            iOSBadgeAutoIncrement: 'iOSBadgeAutoIncrement',
            iOSExtParameters: 'iOSExtParameters',
            iOSInterruptionLevel: 'iOSInterruptionLevel',
            iOSLiveActivityAttributes: 'iOSLiveActivityAttributes',
            iOSLiveActivityAttributesType: 'iOSLiveActivityAttributesType',
            iOSLiveActivityContentState: 'iOSLiveActivityContentState',
            iOSLiveActivityDismissalDate: 'iOSLiveActivityDismissalDate',
            iOSLiveActivityEvent: 'iOSLiveActivityEvent',
            iOSLiveActivityId: 'iOSLiveActivityId',
            iOSLiveActivityStaleDate: 'iOSLiveActivityStaleDate',
            iOSMusic: 'iOSMusic',
            iOSMutableContent: 'iOSMutableContent',
            iOSNotificationCategory: 'iOSNotificationCategory',
            iOSNotificationCollapseId: 'iOSNotificationCollapseId',
            iOSNotificationThreadId: 'iOSNotificationThreadId',
            iOSRelevanceScore: 'iOSRelevanceScore',
            iOSRemind: 'iOSRemind',
            iOSRemindBody: 'iOSRemindBody',
            iOSSilentNotification: 'iOSSilentNotification',
            iOSSubtitle: 'iOSSubtitle',
        };
    }
    static types() {
        return {
            androidActivity: 'string',
            androidBadgeAddNum: 'number',
            androidBadgeClass: 'string',
            androidBadgeSetNum: 'number',
            androidBigBody: 'string',
            androidBigPictureUrl: 'string',
            androidBigTitle: 'string',
            androidExtParameters: 'string',
            androidHonorTargetUserType: 'number',
            androidHuaweiReceiptId: 'string',
            androidHuaweiTargetUserType: 'number',
            androidImageUrl: 'string',
            androidInboxBody: 'string',
            androidMessageHuaweiCategory: 'string',
            androidMessageHuaweiUrgency: 'string',
            androidMessageOppoCategory: 'string',
            androidMessageOppoNotifyLevel: 'number',
            androidMessageVivoCategory: 'string',
            androidMusic: 'string',
            androidNotificationBarPriority: 'number',
            androidNotificationBarType: 'number',
            androidNotificationChannel: 'string',
            androidNotificationGroup: 'string',
            androidNotificationHonorChannel: 'string',
            androidNotificationHuaweiChannel: 'string',
            androidNotificationNotifyId: 'number',
            androidNotificationThreadId: 'string',
            androidNotificationVivoChannel: 'string',
            androidNotificationXiaomiChannel: 'string',
            androidNotifyType: 'string',
            androidOpenType: 'string',
            androidOpenUrl: 'string',
            androidPopupActivity: 'string',
            androidPopupBody: 'string',
            androidPopupTitle: 'string',
            androidRemind: 'boolean',
            androidRenderStyle: 'number',
            androidTargetUserType: 'number',
            androidVivoPushMode: 'number',
            androidVivoReceiptId: 'string',
            androidXiaoMiActivity: 'string',
            androidXiaoMiNotifyBody: 'string',
            androidXiaoMiNotifyTitle: 'string',
            androidXiaomiBigPictureUrl: 'string',
            androidXiaomiImageUrl: 'string',
            appKey: 'number',
            body: 'string',
            deviceType: 'string',
            expireTime: 'string',
            harmonyAction: 'string',
            harmonyActionType: 'string',
            harmonyBadgeAddNum: 'number',
            harmonyBadgeSetNum: 'number',
            harmonyCategory: 'string',
            harmonyExtParameters: 'string',
            harmonyExtensionExtraData: 'string',
            harmonyExtensionPush: 'boolean',
            harmonyImageUrl: 'string',
            harmonyInboxContent: 'string',
            harmonyNotificationSlotType: 'string',
            harmonyNotifyId: 'number',
            harmonyReceiptId: 'string',
            harmonyRemind: 'boolean',
            harmonyRemindBody: 'string',
            harmonyRemindTitle: 'string',
            harmonyRenderStyle: 'string',
            harmonyTestMessage: 'boolean',
            harmonyUri: 'string',
            idempotentToken: 'string',
            jobKey: 'string',
            pushTime: 'string',
            pushType: 'string',
            sendChannels: 'string',
            sendSpeed: 'number',
            smsDelaySecs: 'number',
            smsParams: 'string',
            smsSendPolicy: 'number',
            smsSignName: 'string',
            smsTemplateName: 'string',
            storeOffline: 'boolean',
            target: 'string',
            targetValue: 'string',
            title: 'string',
            trim: 'boolean',
            iOSApnsEnv: 'string',
            iOSBadge: 'number',
            iOSBadgeAutoIncrement: 'boolean',
            iOSExtParameters: 'string',
            iOSInterruptionLevel: 'string',
            iOSLiveActivityAttributes: 'string',
            iOSLiveActivityAttributesType: 'string',
            iOSLiveActivityContentState: 'string',
            iOSLiveActivityDismissalDate: 'number',
            iOSLiveActivityEvent: 'string',
            iOSLiveActivityId: 'string',
            iOSLiveActivityStaleDate: 'number',
            iOSMusic: 'string',
            iOSMutableContent: 'boolean',
            iOSNotificationCategory: 'string',
            iOSNotificationCollapseId: 'string',
            iOSNotificationThreadId: 'string',
            iOSRelevanceScore: 'number',
            iOSRemind: 'boolean',
            iOSRemindBody: 'string',
            iOSSilentNotification: 'boolean',
            iOSSubtitle: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushRequest = PushRequest;
class PushResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushResponseBody = PushResponseBody;
class PushResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushResponse = PushResponse;
class PushMessageToAndroidRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            body: 'Body',
            jobKey: 'JobKey',
            storeOffline: 'StoreOffline',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
        };
    }
    static types() {
        return {
            appKey: 'number',
            body: 'string',
            jobKey: 'string',
            storeOffline: 'boolean',
            target: 'string',
            targetValue: 'string',
            title: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToAndroidRequest = PushMessageToAndroidRequest;
class PushMessageToAndroidResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToAndroidResponseBody = PushMessageToAndroidResponseBody;
class PushMessageToAndroidResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushMessageToAndroidResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToAndroidResponse = PushMessageToAndroidResponse;
class PushMessageToiOSRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            body: 'Body',
            jobKey: 'JobKey',
            storeOffline: 'StoreOffline',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
        };
    }
    static types() {
        return {
            appKey: 'number',
            body: 'string',
            jobKey: 'string',
            storeOffline: 'boolean',
            target: 'string',
            targetValue: 'string',
            title: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToiOSRequest = PushMessageToiOSRequest;
class PushMessageToiOSResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToiOSResponseBody = PushMessageToiOSResponseBody;
class PushMessageToiOSResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushMessageToiOSResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushMessageToiOSResponse = PushMessageToiOSResponse;
class PushNoticeToAndroidRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            body: 'Body',
            extParameters: 'ExtParameters',
            jobKey: 'JobKey',
            storeOffline: 'StoreOffline',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
        };
    }
    static types() {
        return {
            appKey: 'number',
            body: 'string',
            extParameters: 'string',
            jobKey: 'string',
            storeOffline: 'boolean',
            target: 'string',
            targetValue: 'string',
            title: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToAndroidRequest = PushNoticeToAndroidRequest;
class PushNoticeToAndroidResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToAndroidResponseBody = PushNoticeToAndroidResponseBody;
class PushNoticeToAndroidResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushNoticeToAndroidResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToAndroidResponse = PushNoticeToAndroidResponse;
class PushNoticeToiOSRequest extends $dara.Model {
    static names() {
        return {
            apnsEnv: 'ApnsEnv',
            appKey: 'AppKey',
            body: 'Body',
            extParameters: 'ExtParameters',
            jobKey: 'JobKey',
            target: 'Target',
            targetValue: 'TargetValue',
            title: 'Title',
        };
    }
    static types() {
        return {
            apnsEnv: 'string',
            appKey: 'number',
            body: 'string',
            extParameters: 'string',
            jobKey: 'string',
            target: 'string',
            targetValue: 'string',
            title: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToiOSRequest = PushNoticeToiOSRequest;
class PushNoticeToiOSResponseBody extends $dara.Model {
    static names() {
        return {
            messageId: 'MessageId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            messageId: 'string',
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToiOSResponseBody = PushNoticeToiOSResponseBody;
class PushNoticeToiOSResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushNoticeToiOSResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.PushNoticeToiOSResponse = PushNoticeToiOSResponse;
class QueryAliasesRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAliasesRequest = QueryAliasesRequest;
class QueryAliasesResponseBody extends $dara.Model {
    static names() {
        return {
            aliasInfos: 'AliasInfos',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            aliasInfos: QueryAliasesResponseBodyAliasInfos,
            requestId: 'string',
        };
    }
    validate() {
        if (this.aliasInfos && typeof this.aliasInfos.validate === 'function') {
            this.aliasInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAliasesResponseBody = QueryAliasesResponseBody;
class QueryAliasesResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAliasesResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAliasesResponse = QueryAliasesResponse;
class QueryDeviceInfoRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceInfoRequest = QueryDeviceInfoRequest;
class QueryDeviceInfoResponseBody extends $dara.Model {
    static names() {
        return {
            deviceInfo: 'DeviceInfo',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            deviceInfo: QueryDeviceInfoResponseBodyDeviceInfo,
            requestId: 'string',
        };
    }
    validate() {
        if (this.deviceInfo && typeof this.deviceInfo.validate === 'function') {
            this.deviceInfo.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceInfoResponseBody = QueryDeviceInfoResponseBody;
class QueryDeviceInfoResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceInfoResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceInfoResponse = QueryDeviceInfoResponse;
class QueryDeviceStatRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceType: 'DeviceType',
            endTime: 'EndTime',
            queryType: 'QueryType',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceType: 'string',
            endTime: 'string',
            queryType: 'string',
            startTime: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceStatRequest = QueryDeviceStatRequest;
class QueryDeviceStatResponseBody extends $dara.Model {
    static names() {
        return {
            appDeviceStats: 'AppDeviceStats',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            appDeviceStats: QueryDeviceStatResponseBodyAppDeviceStats,
            requestId: 'string',
        };
    }
    validate() {
        if (this.appDeviceStats && typeof this.appDeviceStats.validate === 'function') {
            this.appDeviceStats.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceStatResponseBody = QueryDeviceStatResponseBody;
class QueryDeviceStatResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceStatResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceStatResponse = QueryDeviceStatResponse;
class QueryDevicesByAccountRequest extends $dara.Model {
    static names() {
        return {
            account: 'Account',
            appKey: 'AppKey',
        };
    }
    static types() {
        return {
            account: 'string',
            appKey: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAccountRequest = QueryDevicesByAccountRequest;
class QueryDevicesByAccountResponseBody extends $dara.Model {
    static names() {
        return {
            deviceIds: 'DeviceIds',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            deviceIds: QueryDevicesByAccountResponseBodyDeviceIds,
            requestId: 'string',
        };
    }
    validate() {
        if (this.deviceIds && typeof this.deviceIds.validate === 'function') {
            this.deviceIds.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAccountResponseBody = QueryDevicesByAccountResponseBody;
class QueryDevicesByAccountResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDevicesByAccountResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAccountResponse = QueryDevicesByAccountResponse;
class QueryDevicesByAliasRequest extends $dara.Model {
    static names() {
        return {
            alias: 'Alias',
            appKey: 'AppKey',
        };
    }
    static types() {
        return {
            alias: 'string',
            appKey: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAliasRequest = QueryDevicesByAliasRequest;
class QueryDevicesByAliasResponseBody extends $dara.Model {
    static names() {
        return {
            deviceIds: 'DeviceIds',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            deviceIds: QueryDevicesByAliasResponseBodyDeviceIds,
            requestId: 'string',
        };
    }
    validate() {
        if (this.deviceIds && typeof this.deviceIds.validate === 'function') {
            this.deviceIds.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAliasResponseBody = QueryDevicesByAliasResponseBody;
class QueryDevicesByAliasResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDevicesByAliasResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDevicesByAliasResponse = QueryDevicesByAliasResponse;
class QueryPushRecordsRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            endTime: 'EndTime',
            keyword: 'Keyword',
            nextToken: 'NextToken',
            page: 'Page',
            pageSize: 'PageSize',
            pushType: 'PushType',
            source: 'Source',
            startTime: 'StartTime',
            target: 'Target',
        };
    }
    static types() {
        return {
            appKey: 'number',
            endTime: 'string',
            keyword: 'string',
            nextToken: 'string',
            page: 'number',
            pageSize: 'number',
            pushType: 'string',
            source: 'string',
            startTime: 'string',
            target: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushRecordsRequest = QueryPushRecordsRequest;
class QueryPushRecordsResponseBody extends $dara.Model {
    static names() {
        return {
            nextToken: 'NextToken',
            page: 'Page',
            pageSize: 'PageSize',
            pushInfos: 'PushInfos',
            requestId: 'RequestId',
            total: 'Total',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            page: 'number',
            pageSize: 'number',
            pushInfos: QueryPushRecordsResponseBodyPushInfos,
            requestId: 'string',
            total: 'number',
        };
    }
    validate() {
        if (this.pushInfos && typeof this.pushInfos.validate === 'function') {
            this.pushInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushRecordsResponseBody = QueryPushRecordsResponseBody;
class QueryPushRecordsResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPushRecordsResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushRecordsResponse = QueryPushRecordsResponse;
class QueryPushStatByAppRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            endTime: 'EndTime',
            granularity: 'Granularity',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            appKey: 'number',
            endTime: 'string',
            granularity: 'string',
            startTime: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByAppRequest = QueryPushStatByAppRequest;
class QueryPushStatByAppResponseBody extends $dara.Model {
    static names() {
        return {
            appPushStats: 'AppPushStats',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            appPushStats: QueryPushStatByAppResponseBodyAppPushStats,
            requestId: 'string',
        };
    }
    validate() {
        if (this.appPushStats && typeof this.appPushStats.validate === 'function') {
            this.appPushStats.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByAppResponseBody = QueryPushStatByAppResponseBody;
class QueryPushStatByAppResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPushStatByAppResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByAppResponse = QueryPushStatByAppResponse;
class QueryPushStatByMsgRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            messageId: 'number',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByMsgRequest = QueryPushStatByMsgRequest;
class QueryPushStatByMsgResponseBody extends $dara.Model {
    static names() {
        return {
            pushStats: 'PushStats',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pushStats: QueryPushStatByMsgResponseBodyPushStats,
            requestId: 'string',
        };
    }
    validate() {
        if (this.pushStats && typeof this.pushStats.validate === 'function') {
            this.pushStats.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByMsgResponseBody = QueryPushStatByMsgResponseBody;
class QueryPushStatByMsgResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPushStatByMsgResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPushStatByMsgResponse = QueryPushStatByMsgResponse;
class QueryTagsRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            clientKey: 'ClientKey',
            keyType: 'KeyType',
        };
    }
    static types() {
        return {
            appKey: 'number',
            clientKey: 'string',
            keyType: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTagsRequest = QueryTagsRequest;
class QueryTagsResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
            tagInfos: 'TagInfos',
        };
    }
    static types() {
        return {
            requestId: 'string',
            tagInfos: QueryTagsResponseBodyTagInfos,
        };
    }
    validate() {
        if (this.tagInfos && typeof this.tagInfos.validate === 'function') {
            this.tagInfos.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTagsResponseBody = QueryTagsResponseBody;
class QueryTagsResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTagsResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTagsResponse = QueryTagsResponse;
class QueryUniqueDeviceStatRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            endTime: 'EndTime',
            granularity: 'Granularity',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            appKey: 'number',
            endTime: 'string',
            granularity: 'string',
            startTime: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniqueDeviceStatRequest = QueryUniqueDeviceStatRequest;
class QueryUniqueDeviceStatResponseBody extends $dara.Model {
    static names() {
        return {
            appDeviceStats: 'AppDeviceStats',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            appDeviceStats: QueryUniqueDeviceStatResponseBodyAppDeviceStats,
            requestId: 'string',
        };
    }
    validate() {
        if (this.appDeviceStats && typeof this.appDeviceStats.validate === 'function') {
            this.appDeviceStats.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniqueDeviceStatResponseBody = QueryUniqueDeviceStatResponseBody;
class QueryUniqueDeviceStatResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUniqueDeviceStatResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniqueDeviceStatResponse = QueryUniqueDeviceStatResponse;
class RemoveTagRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            tagName: 'TagName',
        };
    }
    static types() {
        return {
            appKey: 'number',
            tagName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTagRequest = RemoveTagRequest;
class RemoveTagResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTagResponseBody = RemoveTagResponseBody;
class RemoveTagResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveTagResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTagResponse = RemoveTagResponse;
class UnbindAliasRequest extends $dara.Model {
    static names() {
        return {
            aliasName: 'AliasName',
            appKey: 'AppKey',
            deviceId: 'DeviceId',
            unbindAll: 'UnbindAll',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            appKey: 'number',
            deviceId: 'string',
            unbindAll: 'boolean',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindAliasRequest = UnbindAliasRequest;
class UnbindAliasResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindAliasResponseBody = UnbindAliasResponseBody;
class UnbindAliasResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnbindAliasResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindAliasResponse = UnbindAliasResponse;
class UnbindPhoneRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            deviceId: 'DeviceId',
        };
    }
    static types() {
        return {
            appKey: 'number',
            deviceId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindPhoneRequest = UnbindPhoneRequest;
class UnbindPhoneResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindPhoneResponseBody = UnbindPhoneResponseBody;
class UnbindPhoneResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnbindPhoneResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindPhoneResponse = UnbindPhoneResponse;
class UnbindTagRequest extends $dara.Model {
    static names() {
        return {
            appKey: 'AppKey',
            clientKey: 'ClientKey',
            keyType: 'KeyType',
            tagName: 'TagName',
        };
    }
    static types() {
        return {
            appKey: 'number',
            clientKey: 'string',
            keyType: 'string',
            tagName: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindTagRequest = UnbindTagRequest;
class UnbindTagResponseBody extends $dara.Model {
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    validate() {
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindTagResponseBody = UnbindTagResponseBody;
class UnbindTagResponse extends $dara.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnbindTagResponseBody,
        };
    }
    validate() {
        if (this.headers) {
            $dara.Model.validateMap(this.headers);
        }
        if (this.body && typeof this.body.validate === 'function') {
            this.body.validate();
        }
        super.validate();
    }
    constructor(map) {
        super(map);
    }
}
exports.UnbindTagResponse = UnbindTagResponse;
class Client extends openapi_core_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = {
            'ap-northeast-1': "cloudpush.aliyuncs.com",
            'ap-northeast-2-pop': "cloudpush.aliyuncs.com",
            'ap-south-1': "cloudpush.aliyuncs.com",
            'ap-southeast-1': "cloudpush.aliyuncs.com",
            'ap-southeast-2': "cloudpush.aliyuncs.com",
            'ap-southeast-3': "cloudpush.aliyuncs.com",
            'ap-southeast-5': "cloudpush.aliyuncs.com",
            'cn-beijing': "cloudpush.aliyuncs.com",
            'cn-beijing-finance-1': "cloudpush.aliyuncs.com",
            'cn-beijing-finance-pop': "cloudpush.aliyuncs.com",
            'cn-beijing-gov-1': "cloudpush.aliyuncs.com",
            'cn-beijing-nu16-b01': "cloudpush.aliyuncs.com",
            'cn-chengdu': "cloudpush.aliyuncs.com",
            'cn-edge-1': "cloudpush.aliyuncs.com",
            'cn-fujian': "cloudpush.aliyuncs.com",
            'cn-haidian-cm12-c01': "cloudpush.aliyuncs.com",
            'cn-hangzhou': "cloudpush.aliyuncs.com",
            'cn-hangzhou-bj-b01': "cloudpush.aliyuncs.com",
            'cn-hangzhou-finance': "cloudpush.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "cloudpush.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "cloudpush.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "cloudpush.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "cloudpush.aliyuncs.com",
            'cn-hangzhou-test-306': "cloudpush.aliyuncs.com",
            'cn-hongkong': "cloudpush.aliyuncs.com",
            'cn-hongkong-finance-pop': "cloudpush.aliyuncs.com",
            'cn-huhehaote': "cloudpush.aliyuncs.com",
            'cn-north-2-gov-1': "cloudpush.aliyuncs.com",
            'cn-qingdao': "cloudpush.aliyuncs.com",
            'cn-qingdao-nebula': "cloudpush.aliyuncs.com",
            'cn-shanghai': "cloudpush.aliyuncs.com",
            'cn-shanghai-et15-b01': "cloudpush.aliyuncs.com",
            'cn-shanghai-et2-b01': "cloudpush.aliyuncs.com",
            'cn-shanghai-finance-1': "cloudpush.aliyuncs.com",
            'cn-shanghai-inner': "cloudpush.aliyuncs.com",
            'cn-shanghai-internal-test-1': "cloudpush.aliyuncs.com",
            'cn-shenzhen': "cloudpush.aliyuncs.com",
            'cn-shenzhen-finance-1': "cloudpush.aliyuncs.com",
            'cn-shenzhen-inner': "cloudpush.aliyuncs.com",
            'cn-shenzhen-st4-d01': "cloudpush.aliyuncs.com",
            'cn-shenzhen-su18-b01': "cloudpush.aliyuncs.com",
            'cn-wuhan': "cloudpush.aliyuncs.com",
            'cn-yushanfang': "cloudpush.aliyuncs.com",
            'cn-zhangbei-na61-b01': "cloudpush.aliyuncs.com",
            'cn-zhangjiakou': "cloudpush.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "cloudpush.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "cloudpush.aliyuncs.com",
            'eu-central-1': "cloudpush.aliyuncs.com",
            'eu-west-1': "cloudpush.aliyuncs.com",
            'eu-west-1-oxs': "cloudpush.aliyuncs.com",
            'me-east-1': "cloudpush.aliyuncs.com",
            'rus-west-1-pop': "cloudpush.aliyuncs.com",
            'us-east-1': "cloudpush.aliyuncs.com",
            'us-west-1': "cloudpush.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("push", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!$dara.isNull(endpoint)) {
            return endpoint;
        }
        if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return openapi_core_2.OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    /**
     * 绑定别名
     *
     * @param request - BindAliasRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BindAliasResponse
     */
    async bindAliasWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.aliasName)) {
            query["AliasName"] = request.aliasName;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "BindAlias",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new BindAliasResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new BindAliasResponse({}));
        }
    }
    /**
     * 绑定别名
     *
     * @param request - BindAliasRequest
     * @returns BindAliasResponse
     */
    async bindAlias(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.bindAliasWithOptions(request, runtime);
    }
    /**
     * 绑定手机号码
     *
     * @param request - BindPhoneRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BindPhoneResponse
     */
    async bindPhoneWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        if (!$dara.isNull(request.phoneNumber)) {
            query["PhoneNumber"] = request.phoneNumber;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "BindPhone",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new BindPhoneResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new BindPhoneResponse({}));
        }
    }
    /**
     * 绑定手机号码
     *
     * @param request - BindPhoneRequest
     * @returns BindPhoneResponse
     */
    async bindPhone(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.bindPhoneWithOptions(request, runtime);
    }
    /**
     * 绑定标签
     *
     * @param request - BindTagRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BindTagResponse
     */
    async bindTagWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.clientKey)) {
            query["ClientKey"] = request.clientKey;
        }
        if (!$dara.isNull(request.keyType)) {
            query["KeyType"] = request.keyType;
        }
        if (!$dara.isNull(request.tagName)) {
            query["TagName"] = request.tagName;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "BindTag",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new BindTagResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new BindTagResponse({}));
        }
    }
    /**
     * 绑定标签
     *
     * @param request - BindTagRequest
     * @returns BindTagResponse
     */
    async bindTag(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.bindTagWithOptions(request, runtime);
    }
    /**
     * 取消定时推送任务
     *
     * @param request - CancelPushRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CancelPushResponse
     */
    async cancelPushWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.messageId)) {
            query["MessageId"] = request.messageId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "CancelPush",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new CancelPushResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new CancelPushResponse({}));
        }
    }
    /**
     * 取消定时推送任务
     *
     * @param request - CancelPushRequest
     * @returns CancelPushResponse
     */
    async cancelPush(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.cancelPushWithOptions(request, runtime);
    }
    /**
     * @param request - CheckCertificateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckCertificateResponse
     */
    async checkCertificateWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "CheckCertificate",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new CheckCertificateResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new CheckCertificateResponse({}));
        }
    }
    /**
     * @param request - CheckCertificateRequest
     * @returns CheckCertificateResponse
     */
    async checkCertificate(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.checkCertificateWithOptions(request, runtime);
    }
    /**
     * 【废弃】验证设备有效性
     *
     * @deprecated OpenAPI CheckDevice is deprecated, please use Push::2016-08-01::CheckDevices instead.
     *
     * @param request - CheckDeviceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckDeviceResponse
     */
    // Deprecated
    async checkDeviceWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "CheckDevice",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new CheckDeviceResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new CheckDeviceResponse({}));
        }
    }
    /**
     * 【废弃】验证设备有效性
     *
     * @deprecated OpenAPI CheckDevice is deprecated, please use Push::2016-08-01::CheckDevices instead.
     *
     * @param request - CheckDeviceRequest
     * @returns CheckDeviceResponse
     */
    // Deprecated
    async checkDevice(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.checkDeviceWithOptions(request, runtime);
    }
    /**
     * 批量检查设备有效性
     *
     * @param request - CheckDevicesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckDevicesResponse
     */
    async checkDevicesWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceIds)) {
            query["DeviceIds"] = request.deviceIds;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "CheckDevices",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new CheckDevicesResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new CheckDevicesResponse({}));
        }
    }
    /**
     * 批量检查设备有效性
     *
     * @param request - CheckDevicesRequest
     * @returns CheckDevicesResponse
     */
    async checkDevices(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.checkDevicesWithOptions(request, runtime);
    }
    /**
     * 完成持续推送任务
     *
     * @param request - CompleteContinuouslyPushRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CompleteContinuouslyPushResponse
     */
    async completeContinuouslyPushWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.messageId)) {
            query["MessageId"] = request.messageId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "CompleteContinuouslyPush",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new CompleteContinuouslyPushResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new CompleteContinuouslyPushResponse({}));
        }
    }
    /**
     * 完成持续推送任务
     *
     * @param request - CompleteContinuouslyPushRequest
     * @returns CompleteContinuouslyPushResponse
     */
    async completeContinuouslyPush(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.completeContinuouslyPushWithOptions(request, runtime);
    }
    /**
     * 持续推送
     *
     * @param request - ContinuouslyPushRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ContinuouslyPushResponse
     */
    async continuouslyPushWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.messageId)) {
            query["MessageId"] = request.messageId;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "ContinuouslyPush",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new ContinuouslyPushResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new ContinuouslyPushResponse({}));
        }
    }
    /**
     * 持续推送
     *
     * @param request - ContinuouslyPushRequest
     * @returns ContinuouslyPushResponse
     */
    async continuouslyPush(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.continuouslyPushWithOptions(request, runtime);
    }
    /**
     * 【废弃】查询用户已创建的app列表
     *
     * @deprecated OpenAPI ListSummaryApps is deprecated, please use Mhub::2017-08-25::ListApps instead.
     *
     * @param request - ListSummaryAppsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSummaryAppsResponse
     */
    // Deprecated
    async listSummaryAppsWithOptions(runtime) {
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({});
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "ListSummaryApps",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new ListSummaryAppsResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new ListSummaryAppsResponse({}));
        }
    }
    /**
     * 【废弃】查询用户已创建的app列表
     *
     * @deprecated OpenAPI ListSummaryApps is deprecated, please use Mhub::2017-08-25::ListApps instead.
     * @returns ListSummaryAppsResponse
     */
    // Deprecated
    async listSummaryApps() {
        let runtime = new $dara.RuntimeOptions({});
        return await this.listSummaryAppsWithOptions(runtime);
    }
    /**
     * 获取标签列表
     *
     * @param request - ListTagsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTagsResponse
     */
    async listTagsWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "ListTags",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new ListTagsResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new ListTagsResponse({}));
        }
    }
    /**
     * 获取标签列表
     *
     * @param request - ListTagsRequest
     * @returns ListTagsResponse
     */
    async listTags(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.listTagsWithOptions(request, runtime);
    }
    /**
     * 批量推送
     *
     * @param request - MassPushRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MassPushResponse
     */
    async massPushWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.idempotentToken)) {
            query["IdempotentToken"] = request.idempotentToken;
        }
        let body = {};
        if (!$dara.isNull(request.pushTask)) {
            body["PushTask"] = request.pushTask;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
            body: openapi_core_2.OpenApiUtil.parseToMap(body),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "MassPush",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new MassPushResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new MassPushResponse({}));
        }
    }
    /**
     * 批量推送
     *
     * @param request - MassPushRequest
     * @returns MassPushResponse
     */
    async massPush(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.massPushWithOptions(request, runtime);
    }
    /**
     * 高级推送接口
     *
     * @param request - PushRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushResponse
     */
    async pushWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.androidActivity)) {
            query["AndroidActivity"] = request.androidActivity;
        }
        if (!$dara.isNull(request.androidBadgeAddNum)) {
            query["AndroidBadgeAddNum"] = request.androidBadgeAddNum;
        }
        if (!$dara.isNull(request.androidBadgeClass)) {
            query["AndroidBadgeClass"] = request.androidBadgeClass;
        }
        if (!$dara.isNull(request.androidBadgeSetNum)) {
            query["AndroidBadgeSetNum"] = request.androidBadgeSetNum;
        }
        if (!$dara.isNull(request.androidBigBody)) {
            query["AndroidBigBody"] = request.androidBigBody;
        }
        if (!$dara.isNull(request.androidBigPictureUrl)) {
            query["AndroidBigPictureUrl"] = request.androidBigPictureUrl;
        }
        if (!$dara.isNull(request.androidBigTitle)) {
            query["AndroidBigTitle"] = request.androidBigTitle;
        }
        if (!$dara.isNull(request.androidExtParameters)) {
            query["AndroidExtParameters"] = request.androidExtParameters;
        }
        if (!$dara.isNull(request.androidHonorTargetUserType)) {
            query["AndroidHonorTargetUserType"] = request.androidHonorTargetUserType;
        }
        if (!$dara.isNull(request.androidHuaweiReceiptId)) {
            query["AndroidHuaweiReceiptId"] = request.androidHuaweiReceiptId;
        }
        if (!$dara.isNull(request.androidHuaweiTargetUserType)) {
            query["AndroidHuaweiTargetUserType"] = request.androidHuaweiTargetUserType;
        }
        if (!$dara.isNull(request.androidImageUrl)) {
            query["AndroidImageUrl"] = request.androidImageUrl;
        }
        if (!$dara.isNull(request.androidInboxBody)) {
            query["AndroidInboxBody"] = request.androidInboxBody;
        }
        if (!$dara.isNull(request.androidMessageHuaweiCategory)) {
            query["AndroidMessageHuaweiCategory"] = request.androidMessageHuaweiCategory;
        }
        if (!$dara.isNull(request.androidMessageHuaweiUrgency)) {
            query["AndroidMessageHuaweiUrgency"] = request.androidMessageHuaweiUrgency;
        }
        if (!$dara.isNull(request.androidMessageOppoCategory)) {
            query["AndroidMessageOppoCategory"] = request.androidMessageOppoCategory;
        }
        if (!$dara.isNull(request.androidMessageOppoNotifyLevel)) {
            query["AndroidMessageOppoNotifyLevel"] = request.androidMessageOppoNotifyLevel;
        }
        if (!$dara.isNull(request.androidMessageVivoCategory)) {
            query["AndroidMessageVivoCategory"] = request.androidMessageVivoCategory;
        }
        if (!$dara.isNull(request.androidMusic)) {
            query["AndroidMusic"] = request.androidMusic;
        }
        if (!$dara.isNull(request.androidNotificationBarPriority)) {
            query["AndroidNotificationBarPriority"] = request.androidNotificationBarPriority;
        }
        if (!$dara.isNull(request.androidNotificationBarType)) {
            query["AndroidNotificationBarType"] = request.androidNotificationBarType;
        }
        if (!$dara.isNull(request.androidNotificationChannel)) {
            query["AndroidNotificationChannel"] = request.androidNotificationChannel;
        }
        if (!$dara.isNull(request.androidNotificationGroup)) {
            query["AndroidNotificationGroup"] = request.androidNotificationGroup;
        }
        if (!$dara.isNull(request.androidNotificationHonorChannel)) {
            query["AndroidNotificationHonorChannel"] = request.androidNotificationHonorChannel;
        }
        if (!$dara.isNull(request.androidNotificationHuaweiChannel)) {
            query["AndroidNotificationHuaweiChannel"] = request.androidNotificationHuaweiChannel;
        }
        if (!$dara.isNull(request.androidNotificationNotifyId)) {
            query["AndroidNotificationNotifyId"] = request.androidNotificationNotifyId;
        }
        if (!$dara.isNull(request.androidNotificationThreadId)) {
            query["AndroidNotificationThreadId"] = request.androidNotificationThreadId;
        }
        if (!$dara.isNull(request.androidNotificationVivoChannel)) {
            query["AndroidNotificationVivoChannel"] = request.androidNotificationVivoChannel;
        }
        if (!$dara.isNull(request.androidNotificationXiaomiChannel)) {
            query["AndroidNotificationXiaomiChannel"] = request.androidNotificationXiaomiChannel;
        }
        if (!$dara.isNull(request.androidNotifyType)) {
            query["AndroidNotifyType"] = request.androidNotifyType;
        }
        if (!$dara.isNull(request.androidOpenType)) {
            query["AndroidOpenType"] = request.androidOpenType;
        }
        if (!$dara.isNull(request.androidOpenUrl)) {
            query["AndroidOpenUrl"] = request.androidOpenUrl;
        }
        if (!$dara.isNull(request.androidPopupActivity)) {
            query["AndroidPopupActivity"] = request.androidPopupActivity;
        }
        if (!$dara.isNull(request.androidPopupBody)) {
            query["AndroidPopupBody"] = request.androidPopupBody;
        }
        if (!$dara.isNull(request.androidPopupTitle)) {
            query["AndroidPopupTitle"] = request.androidPopupTitle;
        }
        if (!$dara.isNull(request.androidRemind)) {
            query["AndroidRemind"] = request.androidRemind;
        }
        if (!$dara.isNull(request.androidRenderStyle)) {
            query["AndroidRenderStyle"] = request.androidRenderStyle;
        }
        if (!$dara.isNull(request.androidTargetUserType)) {
            query["AndroidTargetUserType"] = request.androidTargetUserType;
        }
        if (!$dara.isNull(request.androidVivoPushMode)) {
            query["AndroidVivoPushMode"] = request.androidVivoPushMode;
        }
        if (!$dara.isNull(request.androidVivoReceiptId)) {
            query["AndroidVivoReceiptId"] = request.androidVivoReceiptId;
        }
        if (!$dara.isNull(request.androidXiaoMiActivity)) {
            query["AndroidXiaoMiActivity"] = request.androidXiaoMiActivity;
        }
        if (!$dara.isNull(request.androidXiaoMiNotifyBody)) {
            query["AndroidXiaoMiNotifyBody"] = request.androidXiaoMiNotifyBody;
        }
        if (!$dara.isNull(request.androidXiaoMiNotifyTitle)) {
            query["AndroidXiaoMiNotifyTitle"] = request.androidXiaoMiNotifyTitle;
        }
        if (!$dara.isNull(request.androidXiaomiBigPictureUrl)) {
            query["AndroidXiaomiBigPictureUrl"] = request.androidXiaomiBigPictureUrl;
        }
        if (!$dara.isNull(request.androidXiaomiImageUrl)) {
            query["AndroidXiaomiImageUrl"] = request.androidXiaomiImageUrl;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.body)) {
            query["Body"] = request.body;
        }
        if (!$dara.isNull(request.deviceType)) {
            query["DeviceType"] = request.deviceType;
        }
        if (!$dara.isNull(request.expireTime)) {
            query["ExpireTime"] = request.expireTime;
        }
        if (!$dara.isNull(request.harmonyAction)) {
            query["HarmonyAction"] = request.harmonyAction;
        }
        if (!$dara.isNull(request.harmonyActionType)) {
            query["HarmonyActionType"] = request.harmonyActionType;
        }
        if (!$dara.isNull(request.harmonyBadgeAddNum)) {
            query["HarmonyBadgeAddNum"] = request.harmonyBadgeAddNum;
        }
        if (!$dara.isNull(request.harmonyBadgeSetNum)) {
            query["HarmonyBadgeSetNum"] = request.harmonyBadgeSetNum;
        }
        if (!$dara.isNull(request.harmonyCategory)) {
            query["HarmonyCategory"] = request.harmonyCategory;
        }
        if (!$dara.isNull(request.harmonyExtParameters)) {
            query["HarmonyExtParameters"] = request.harmonyExtParameters;
        }
        if (!$dara.isNull(request.harmonyExtensionExtraData)) {
            query["HarmonyExtensionExtraData"] = request.harmonyExtensionExtraData;
        }
        if (!$dara.isNull(request.harmonyExtensionPush)) {
            query["HarmonyExtensionPush"] = request.harmonyExtensionPush;
        }
        if (!$dara.isNull(request.harmonyImageUrl)) {
            query["HarmonyImageUrl"] = request.harmonyImageUrl;
        }
        if (!$dara.isNull(request.harmonyInboxContent)) {
            query["HarmonyInboxContent"] = request.harmonyInboxContent;
        }
        if (!$dara.isNull(request.harmonyNotificationSlotType)) {
            query["HarmonyNotificationSlotType"] = request.harmonyNotificationSlotType;
        }
        if (!$dara.isNull(request.harmonyNotifyId)) {
            query["HarmonyNotifyId"] = request.harmonyNotifyId;
        }
        if (!$dara.isNull(request.harmonyReceiptId)) {
            query["HarmonyReceiptId"] = request.harmonyReceiptId;
        }
        if (!$dara.isNull(request.harmonyRemind)) {
            query["HarmonyRemind"] = request.harmonyRemind;
        }
        if (!$dara.isNull(request.harmonyRemindBody)) {
            query["HarmonyRemindBody"] = request.harmonyRemindBody;
        }
        if (!$dara.isNull(request.harmonyRemindTitle)) {
            query["HarmonyRemindTitle"] = request.harmonyRemindTitle;
        }
        if (!$dara.isNull(request.harmonyRenderStyle)) {
            query["HarmonyRenderStyle"] = request.harmonyRenderStyle;
        }
        if (!$dara.isNull(request.harmonyTestMessage)) {
            query["HarmonyTestMessage"] = request.harmonyTestMessage;
        }
        if (!$dara.isNull(request.harmonyUri)) {
            query["HarmonyUri"] = request.harmonyUri;
        }
        if (!$dara.isNull(request.idempotentToken)) {
            query["IdempotentToken"] = request.idempotentToken;
        }
        if (!$dara.isNull(request.jobKey)) {
            query["JobKey"] = request.jobKey;
        }
        if (!$dara.isNull(request.pushTime)) {
            query["PushTime"] = request.pushTime;
        }
        if (!$dara.isNull(request.pushType)) {
            query["PushType"] = request.pushType;
        }
        if (!$dara.isNull(request.sendChannels)) {
            query["SendChannels"] = request.sendChannels;
        }
        if (!$dara.isNull(request.sendSpeed)) {
            query["SendSpeed"] = request.sendSpeed;
        }
        if (!$dara.isNull(request.smsDelaySecs)) {
            query["SmsDelaySecs"] = request.smsDelaySecs;
        }
        if (!$dara.isNull(request.smsParams)) {
            query["SmsParams"] = request.smsParams;
        }
        if (!$dara.isNull(request.smsSendPolicy)) {
            query["SmsSendPolicy"] = request.smsSendPolicy;
        }
        if (!$dara.isNull(request.smsSignName)) {
            query["SmsSignName"] = request.smsSignName;
        }
        if (!$dara.isNull(request.smsTemplateName)) {
            query["SmsTemplateName"] = request.smsTemplateName;
        }
        if (!$dara.isNull(request.storeOffline)) {
            query["StoreOffline"] = request.storeOffline;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        if (!$dara.isNull(request.title)) {
            query["Title"] = request.title;
        }
        if (!$dara.isNull(request.trim)) {
            query["Trim"] = request.trim;
        }
        if (!$dara.isNull(request.iOSApnsEnv)) {
            query["iOSApnsEnv"] = request.iOSApnsEnv;
        }
        if (!$dara.isNull(request.iOSBadge)) {
            query["iOSBadge"] = request.iOSBadge;
        }
        if (!$dara.isNull(request.iOSBadgeAutoIncrement)) {
            query["iOSBadgeAutoIncrement"] = request.iOSBadgeAutoIncrement;
        }
        if (!$dara.isNull(request.iOSExtParameters)) {
            query["iOSExtParameters"] = request.iOSExtParameters;
        }
        if (!$dara.isNull(request.iOSInterruptionLevel)) {
            query["iOSInterruptionLevel"] = request.iOSInterruptionLevel;
        }
        if (!$dara.isNull(request.iOSLiveActivityAttributes)) {
            query["iOSLiveActivityAttributes"] = request.iOSLiveActivityAttributes;
        }
        if (!$dara.isNull(request.iOSLiveActivityAttributesType)) {
            query["iOSLiveActivityAttributesType"] = request.iOSLiveActivityAttributesType;
        }
        if (!$dara.isNull(request.iOSLiveActivityContentState)) {
            query["iOSLiveActivityContentState"] = request.iOSLiveActivityContentState;
        }
        if (!$dara.isNull(request.iOSLiveActivityDismissalDate)) {
            query["iOSLiveActivityDismissalDate"] = request.iOSLiveActivityDismissalDate;
        }
        if (!$dara.isNull(request.iOSLiveActivityEvent)) {
            query["iOSLiveActivityEvent"] = request.iOSLiveActivityEvent;
        }
        if (!$dara.isNull(request.iOSLiveActivityId)) {
            query["iOSLiveActivityId"] = request.iOSLiveActivityId;
        }
        if (!$dara.isNull(request.iOSLiveActivityStaleDate)) {
            query["iOSLiveActivityStaleDate"] = request.iOSLiveActivityStaleDate;
        }
        if (!$dara.isNull(request.iOSMusic)) {
            query["iOSMusic"] = request.iOSMusic;
        }
        if (!$dara.isNull(request.iOSMutableContent)) {
            query["iOSMutableContent"] = request.iOSMutableContent;
        }
        if (!$dara.isNull(request.iOSNotificationCategory)) {
            query["iOSNotificationCategory"] = request.iOSNotificationCategory;
        }
        if (!$dara.isNull(request.iOSNotificationCollapseId)) {
            query["iOSNotificationCollapseId"] = request.iOSNotificationCollapseId;
        }
        if (!$dara.isNull(request.iOSNotificationThreadId)) {
            query["iOSNotificationThreadId"] = request.iOSNotificationThreadId;
        }
        if (!$dara.isNull(request.iOSRelevanceScore)) {
            query["iOSRelevanceScore"] = request.iOSRelevanceScore;
        }
        if (!$dara.isNull(request.iOSRemind)) {
            query["iOSRemind"] = request.iOSRemind;
        }
        if (!$dara.isNull(request.iOSRemindBody)) {
            query["iOSRemindBody"] = request.iOSRemindBody;
        }
        if (!$dara.isNull(request.iOSSilentNotification)) {
            query["iOSSilentNotification"] = request.iOSSilentNotification;
        }
        if (!$dara.isNull(request.iOSSubtitle)) {
            query["iOSSubtitle"] = request.iOSSubtitle;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "Push",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new PushResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new PushResponse({}));
        }
    }
    /**
     * 高级推送接口
     *
     * @param request - PushRequest
     * @returns PushResponse
     */
    async push(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.pushWithOptions(request, runtime);
    }
    /**
     * 推送消息给Android设备
     *
     * @param request - PushMessageToAndroidRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushMessageToAndroidResponse
     */
    async pushMessageToAndroidWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.body)) {
            query["Body"] = request.body;
        }
        if (!$dara.isNull(request.jobKey)) {
            query["JobKey"] = request.jobKey;
        }
        if (!$dara.isNull(request.storeOffline)) {
            query["StoreOffline"] = request.storeOffline;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        if (!$dara.isNull(request.title)) {
            query["Title"] = request.title;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "PushMessageToAndroid",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new PushMessageToAndroidResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new PushMessageToAndroidResponse({}));
        }
    }
    /**
     * 推送消息给Android设备
     *
     * @param request - PushMessageToAndroidRequest
     * @returns PushMessageToAndroidResponse
     */
    async pushMessageToAndroid(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.pushMessageToAndroidWithOptions(request, runtime);
    }
    /**
     * 推送消息给iOS设备
     *
     * @param request - PushMessageToiOSRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushMessageToiOSResponse
     */
    async pushMessageToiOSWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.body)) {
            query["Body"] = request.body;
        }
        if (!$dara.isNull(request.jobKey)) {
            query["JobKey"] = request.jobKey;
        }
        if (!$dara.isNull(request.storeOffline)) {
            query["StoreOffline"] = request.storeOffline;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        if (!$dara.isNull(request.title)) {
            query["Title"] = request.title;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "PushMessageToiOS",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new PushMessageToiOSResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new PushMessageToiOSResponse({}));
        }
    }
    /**
     * 推送消息给iOS设备
     *
     * @param request - PushMessageToiOSRequest
     * @returns PushMessageToiOSResponse
     */
    async pushMessageToiOS(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.pushMessageToiOSWithOptions(request, runtime);
    }
    /**
     * 推送通知给Android设备
     *
     * @param request - PushNoticeToAndroidRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushNoticeToAndroidResponse
     */
    async pushNoticeToAndroidWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.body)) {
            query["Body"] = request.body;
        }
        if (!$dara.isNull(request.extParameters)) {
            query["ExtParameters"] = request.extParameters;
        }
        if (!$dara.isNull(request.jobKey)) {
            query["JobKey"] = request.jobKey;
        }
        if (!$dara.isNull(request.storeOffline)) {
            query["StoreOffline"] = request.storeOffline;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        if (!$dara.isNull(request.title)) {
            query["Title"] = request.title;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "PushNoticeToAndroid",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new PushNoticeToAndroidResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new PushNoticeToAndroidResponse({}));
        }
    }
    /**
     * 推送通知给Android设备
     *
     * @param request - PushNoticeToAndroidRequest
     * @returns PushNoticeToAndroidResponse
     */
    async pushNoticeToAndroid(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.pushNoticeToAndroidWithOptions(request, runtime);
    }
    /**
     * 推送通知给iOS设备
     *
     * @param request - PushNoticeToiOSRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushNoticeToiOSResponse
     */
    async pushNoticeToiOSWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.apnsEnv)) {
            query["ApnsEnv"] = request.apnsEnv;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.body)) {
            query["Body"] = request.body;
        }
        if (!$dara.isNull(request.extParameters)) {
            query["ExtParameters"] = request.extParameters;
        }
        if (!$dara.isNull(request.jobKey)) {
            query["JobKey"] = request.jobKey;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        if (!$dara.isNull(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        if (!$dara.isNull(request.title)) {
            query["Title"] = request.title;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "PushNoticeToiOS",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new PushNoticeToiOSResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new PushNoticeToiOSResponse({}));
        }
    }
    /**
     * 推送通知给iOS设备
     *
     * @param request - PushNoticeToiOSRequest
     * @returns PushNoticeToiOSResponse
     */
    async pushNoticeToiOS(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.pushNoticeToiOSWithOptions(request, runtime);
    }
    /**
     * 查询别名
     *
     * @param request - QueryAliasesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAliasesResponse
     */
    async queryAliasesWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryAliases",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryAliasesResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryAliasesResponse({}));
        }
    }
    /**
     * 查询别名
     *
     * @param request - QueryAliasesRequest
     * @returns QueryAliasesResponse
     */
    async queryAliases(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryAliasesWithOptions(request, runtime);
    }
    /**
     * 查询设备详情
     *
     * @param request - QueryDeviceInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceInfoResponse
     */
    async queryDeviceInfoWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryDeviceInfo",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryDeviceInfoResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryDeviceInfoResponse({}));
        }
    }
    /**
     * 查询设备详情
     *
     * @param request - QueryDeviceInfoRequest
     * @returns QueryDeviceInfoResponse
     */
    async queryDeviceInfo(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryDeviceInfoWithOptions(request, runtime);
    }
    /**
     * 设备新增与留存
     *
     * @param request - QueryDeviceStatRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceStatResponse
     */
    async queryDeviceStatWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceType)) {
            query["DeviceType"] = request.deviceType;
        }
        if (!$dara.isNull(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!$dara.isNull(request.queryType)) {
            query["QueryType"] = request.queryType;
        }
        if (!$dara.isNull(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryDeviceStat",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryDeviceStatResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryDeviceStatResponse({}));
        }
    }
    /**
     * 设备新增与留存
     *
     * @param request - QueryDeviceStatRequest
     * @returns QueryDeviceStatResponse
     */
    async queryDeviceStat(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryDeviceStatWithOptions(request, runtime);
    }
    /**
     * 通过账户查询设备列表
     *
     * @param request - QueryDevicesByAccountRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDevicesByAccountResponse
     */
    async queryDevicesByAccountWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.account)) {
            query["Account"] = request.account;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryDevicesByAccount",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryDevicesByAccountResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryDevicesByAccountResponse({}));
        }
    }
    /**
     * 通过账户查询设备列表
     *
     * @param request - QueryDevicesByAccountRequest
     * @returns QueryDevicesByAccountResponse
     */
    async queryDevicesByAccount(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryDevicesByAccountWithOptions(request, runtime);
    }
    /**
     * 通过别名查询设备列表
     *
     * @param request - QueryDevicesByAliasRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDevicesByAliasResponse
     */
    async queryDevicesByAliasWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.alias)) {
            query["Alias"] = request.alias;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryDevicesByAlias",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryDevicesByAliasResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryDevicesByAliasResponse({}));
        }
    }
    /**
     * 通过别名查询设备列表
     *
     * @param request - QueryDevicesByAliasRequest
     * @returns QueryDevicesByAliasResponse
     */
    async queryDevicesByAlias(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryDevicesByAliasWithOptions(request, runtime);
    }
    /**
     * @param request - QueryPushRecordsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPushRecordsResponse
     */
    async queryPushRecordsWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!$dara.isNull(request.keyword)) {
            query["Keyword"] = request.keyword;
        }
        if (!$dara.isNull(request.nextToken)) {
            query["NextToken"] = request.nextToken;
        }
        if (!$dara.isNull(request.page)) {
            query["Page"] = request.page;
        }
        if (!$dara.isNull(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!$dara.isNull(request.pushType)) {
            query["PushType"] = request.pushType;
        }
        if (!$dara.isNull(request.source)) {
            query["Source"] = request.source;
        }
        if (!$dara.isNull(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!$dara.isNull(request.target)) {
            query["Target"] = request.target;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryPushRecords",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryPushRecordsResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryPushRecordsResponse({}));
        }
    }
    /**
     * @param request - QueryPushRecordsRequest
     * @returns QueryPushRecordsResponse
     */
    async queryPushRecords(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryPushRecordsWithOptions(request, runtime);
    }
    /**
     * App维度推送统计
     *
     * @param request - QueryPushStatByAppRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPushStatByAppResponse
     */
    async queryPushStatByAppWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!$dara.isNull(request.granularity)) {
            query["Granularity"] = request.granularity;
        }
        if (!$dara.isNull(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryPushStatByApp",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryPushStatByAppResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryPushStatByAppResponse({}));
        }
    }
    /**
     * App维度推送统计
     *
     * @param request - QueryPushStatByAppRequest
     * @returns QueryPushStatByAppResponse
     */
    async queryPushStatByApp(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryPushStatByAppWithOptions(request, runtime);
    }
    /**
     * 任务维度推送统计
     *
     * @param request - QueryPushStatByMsgRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPushStatByMsgResponse
     */
    async queryPushStatByMsgWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.messageId)) {
            query["MessageId"] = request.messageId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryPushStatByMsg",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryPushStatByMsgResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryPushStatByMsgResponse({}));
        }
    }
    /**
     * 任务维度推送统计
     *
     * @param request - QueryPushStatByMsgRequest
     * @returns QueryPushStatByMsgResponse
     */
    async queryPushStatByMsg(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryPushStatByMsgWithOptions(request, runtime);
    }
    /**
     * 查询标签列表
     *
     * @param request - QueryTagsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTagsResponse
     */
    async queryTagsWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.clientKey)) {
            query["ClientKey"] = request.clientKey;
        }
        if (!$dara.isNull(request.keyType)) {
            query["KeyType"] = request.keyType;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryTags",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryTagsResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryTagsResponse({}));
        }
    }
    /**
     * 查询标签列表
     *
     * @param request - QueryTagsRequest
     * @returns QueryTagsResponse
     */
    async queryTags(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryTagsWithOptions(request, runtime);
    }
    /**
     * 去重设备统计
     *
     * @param request - QueryUniqueDeviceStatRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUniqueDeviceStatResponse
     */
    async queryUniqueDeviceStatWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!$dara.isNull(request.granularity)) {
            query["Granularity"] = request.granularity;
        }
        if (!$dara.isNull(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "QueryUniqueDeviceStat",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new QueryUniqueDeviceStatResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new QueryUniqueDeviceStatResponse({}));
        }
    }
    /**
     * 去重设备统计
     *
     * @param request - QueryUniqueDeviceStatRequest
     * @returns QueryUniqueDeviceStatResponse
     */
    async queryUniqueDeviceStat(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.queryUniqueDeviceStatWithOptions(request, runtime);
    }
    /**
     * 删除标签
     *
     * @param request - RemoveTagRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveTagResponse
     */
    async removeTagWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.tagName)) {
            query["TagName"] = request.tagName;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "RemoveTag",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new RemoveTagResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new RemoveTagResponse({}));
        }
    }
    /**
     * 删除标签
     *
     * @param request - RemoveTagRequest
     * @returns RemoveTagResponse
     */
    async removeTag(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.removeTagWithOptions(request, runtime);
    }
    /**
     * 解绑别名
     *
     * @param request - UnbindAliasRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnbindAliasResponse
     */
    async unbindAliasWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.aliasName)) {
            query["AliasName"] = request.aliasName;
        }
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        if (!$dara.isNull(request.unbindAll)) {
            query["UnbindAll"] = request.unbindAll;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "UnbindAlias",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new UnbindAliasResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new UnbindAliasResponse({}));
        }
    }
    /**
     * 解绑别名
     *
     * @param request - UnbindAliasRequest
     * @returns UnbindAliasResponse
     */
    async unbindAlias(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.unbindAliasWithOptions(request, runtime);
    }
    /**
     * 解绑手机号码
     *
     * @param request - UnbindPhoneRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnbindPhoneResponse
     */
    async unbindPhoneWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.deviceId)) {
            query["DeviceId"] = request.deviceId;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "UnbindPhone",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new UnbindPhoneResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new UnbindPhoneResponse({}));
        }
    }
    /**
     * 解绑手机号码
     *
     * @param request - UnbindPhoneRequest
     * @returns UnbindPhoneResponse
     */
    async unbindPhone(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.unbindPhoneWithOptions(request, runtime);
    }
    /**
     * 绑定标签
     *
     * @param request - UnbindTagRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnbindTagResponse
     */
    async unbindTagWithOptions(request, runtime) {
        request.validate();
        let query = {};
        if (!$dara.isNull(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!$dara.isNull(request.clientKey)) {
            query["ClientKey"] = request.clientKey;
        }
        if (!$dara.isNull(request.keyType)) {
            query["KeyType"] = request.keyType;
        }
        if (!$dara.isNull(request.tagName)) {
            query["TagName"] = request.tagName;
        }
        let req = new openapi_core_2.$OpenApiUtil.OpenApiRequest({
            query: openapi_core_2.OpenApiUtil.query(query),
        });
        let params = new openapi_core_2.$OpenApiUtil.Params({
            action: "UnbindTag",
            version: "2016-08-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
            return $dara.cast(await this.callApi(params, req, runtime), new UnbindTagResponse({}));
        }
        else {
            return $dara.cast(await this.execute(params, req, runtime), new UnbindTagResponse({}));
        }
    }
    /**
     * 绑定标签
     *
     * @param request - UnbindTagRequest
     * @returns UnbindTagResponse
     */
    async unbindTag(request) {
        let runtime = new $dara.RuntimeOptions({});
        return await this.unbindTagWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map