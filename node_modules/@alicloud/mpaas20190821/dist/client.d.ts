import * as $Util from '@alicloud/tea-util';
import RPC, * as $RPC from '@alicloud/rpc-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class UpdateMpaasAppInfoRequest extends $tea.Model {
    appId?: string;
    appName?: string;
    iconFileUrl?: string;
    identifier?: string;
    onexFlag?: boolean;
    systemType?: string;
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMpaasAppInfoResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: UpdateMpaasAppInfoResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RunMsaDiffRequest extends $tea.Model {
    appId: string;
    mpaasMappcenterMsaDiffRunJsonStr: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RunMsaDiffResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: RunMsaDiffResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMsaEnhanceRequest extends $tea.Model {
    appId: string;
    mpaasMappcenterMsaEnhanceCreateJsonStr: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMsaEnhanceResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: CreateMsaEnhanceResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyDataRequest extends $tea.Model {
    appId: string;
    date: string;
    tenantId: string;
    tinyAppId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyDataResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: QueryMPaaSMasTinyAppDailyDataResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppHistoryDataRequest extends $tea.Model {
    appId: string;
    date: string;
    tenantId: string;
    tinyAppId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppHistoryDataResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: QueryMPaaSMasTinyAppHistoryDataResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyPageViewRequest extends $tea.Model {
    appId: string;
    date: string;
    keyword?: string;
    order: string;
    orderCol: string;
    pageLen: string;
    pageNum: string;
    tenantId: string;
    tinyAppId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyPageViewResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: QueryMPaaSMasTinyAppDailyPageViewResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMPaaSMasTinyAppRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMPaaSMasTinyAppResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: ListMPaaSMasTinyAppResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsRequest extends $tea.Model {
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listMappCenterAppResult: ListMappCenterAppsResponseListMappCenterAppResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterWorkspacesRequest extends $tea.Model {
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterWorkspacesResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listMappCenterWorkspaceResult: ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppRequest extends $tea.Model {
    appId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    queryMappCenterAppResult: QueryMappCenterAppResponseQueryMappCenterAppResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportMappCenterAppConfigRequest extends $tea.Model {
    appId?: string;
    certRsaBase64?: string;
    identifier: string;
    onexFlag: boolean;
    systemType: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportMappCenterAppConfigResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    exportMappCenterAppConfigResult: ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMpaasMrtcArtvcRecordfileRequest extends $tea.Model {
    appId?: string;
    bizAppCode?: string;
    bizName?: string;
    bizRequestId?: string;
    mediaType?: string;
    recordId?: string;
    roomId?: string;
    s?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMpaasMrtcArtvcRecordfileResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    mrtcApiRecordFileQueryWrapResp: DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMpaasMrtcArtvcRecordfileRequest extends $tea.Model {
    appId?: string;
    bizAppCode?: string;
    bizName?: string;
    bizRequestId?: string;
    mediaType?: string;
    recordId?: string;
    roomId?: string;
    s?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMpaasMrtcArtvcRecordfileResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    mrtcApiRecordFileQueryWrapResp: QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniTasksRequest extends $tea.Model {
    appId: string;
    id: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniTasksResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listMiniTaskResult: ListMcubeMiniTasksResponseListMiniTaskResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniPackagesRequest extends $tea.Model {
    appId: string;
    h5Id: string;
    packageTypes: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniPackagesResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listMiniPackageResult: ListMcubeMiniPackagesResponseListMiniPackageResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMcubeFileTokenRequest extends $tea.Model {
    appId: string;
    onexFlag: boolean;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMcubeFileTokenResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    getFileTokenResult: GetMcubeFileTokenResponseGetFileTokenResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMcubeWhitelistRequest extends $tea.Model {
    appId: string;
    id: string;
    keyIds?: string;
    onexFlag: boolean;
    ossUrl?: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMcubeWhitelistResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    addWhitelistResult: UpdateMcubeWhitelistResponseAddWhitelistResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeWhitelistRequest extends $tea.Model {
    appId: string;
    id: number;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeWhitelistResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    deleteWhitelistResult: DeleteMcubeWhitelistResponseDeleteWhitelistResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniTaskRequest extends $tea.Model {
    appId: string;
    greyConfigInfo?: string;
    greyEndtimeData?: string;
    greyNum?: number;
    memo: string;
    packageId: number;
    publishMode: number;
    publishType: number;
    tenantId: string;
    whitelistIds?: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniTaskResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    createMiniTaskResult: CreateMcubeMiniTaskResponseCreateMiniTaskResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExistMcubeRsaKeyRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExistMcubeRsaKeyResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    checkRsaKeyResult: ExistMcubeRsaKeyResponseCheckRsaKeyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeMiniPackageRequest extends $tea.Model {
    appId: string;
    autoInstall: number;
    clientVersionMax?: string;
    clientVersionMin: string;
    enableKeepAlive: string;
    enableOptionMenu: string;
    enableTabBar: number;
    extendInfo?: string;
    h5Id: string;
    h5Name: string;
    h5Version: string;
    iconFileUrl: string;
    installType: number;
    mainUrl: string;
    onexFlag: boolean;
    packageType: number;
    platform: string;
    resourceFileUrl: string;
    resourceType: number;
    tenantId: string;
    userId: string;
    uuid?: string;
    vhost: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeMiniPackageResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    uploadMiniPackageResult: UploadMcubeMiniPackageResponseUploadMiniPackageResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniTaskRequest extends $tea.Model {
    appId: string;
    taskId: number;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniTaskResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    queryMiniTaskResult: QueryMcubeMiniTaskResponseQueryMiniTaskResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniPackageRequest extends $tea.Model {
    appId: string;
    h5Id: string;
    id: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniPackageResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    queryMiniPackageResult: QueryMcubeMiniPackageResponseQueryMiniPackageResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeRsaKeyRequest extends $tea.Model {
    appId: string;
    fileUrl: string;
    onexFlag: boolean;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeRsaKeyResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    uploadRsaResult: UploadMcubeRsaKeyResponseUploadRsaResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeMiniAppRequest extends $tea.Model {
    appId: string;
    h5Id: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeMiniAppResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    deleteMiniResult: DeleteMcubeMiniAppResponseDeleteMiniResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    whitelistType: string;
    whiteListName: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    createWhitelistResult: CreateMcubeWhitelistResponseCreateWhitelistResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistForIdeRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    userId: string;
    whitelistValue: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistForIdeResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    createWhitelistForIdeResult: CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMcubeMiniTaskStatusRequest extends $tea.Model {
    appId: string;
    bizType: string;
    packageId: number;
    taskId: number;
    taskStatus: number;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMcubeMiniTaskStatusResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    changeMiniTaskStatusResult: ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeVhostRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    vhost: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeVhostResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    createVhostResult: CreateMcubeVhostResponseCreateVhostResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniAppRequest extends $tea.Model {
    appId: string;
    h5Id: string;
    h5Name: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniAppResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    createMiniResult: CreateMcubeMiniAppResponseCreateMiniResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeVhostRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeVhostResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    queryVhostResult: QueryMcubeVhostResponseQueryVhostResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniAppsRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniAppsResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listMiniResult: ListMcubeMiniAppsResponseListMiniResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeWhitelistsRequest extends $tea.Model {
    appId: string;
    tenantId: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeWhitelistsResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    listWhitelistResult: ListMcubeWhitelistsResponseListWhitelistResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOpenSingleDataRequest extends $tea.Model {
    appId: string;
    appMaxVersion?: string;
    appMinVersion?: string;
    bizType: string;
    checkOnline?: boolean;
    extAttrStr?: string;
    linkToken: string;
    osType?: string;
    payload: string;
    thirdMsgId: string;
    validTimeEnd?: number;
    validTimeStart?: number;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOpenSingleDataResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOpenGlobalDataRequest extends $tea.Model {
    appId: string;
    appMaxVersion?: string;
    appMinVersion?: string;
    bizType: string;
    extAttrStr?: string;
    maxUid?: number;
    minUid?: number;
    osType?: string;
    payload: string;
    thirdMsgId: string;
    uids?: string;
    validTimeEnd?: number;
    validTimeStart?: number;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOpenGlobalDataResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSimpleRequest extends $tea.Model {
    appId: string;
    content: string;
    deliveryType: number;
    expiredSeconds: number;
    extendedParams?: string;
    notifyType?: string;
    pushAction?: number;
    silent?: number;
    targetMsgkey: string;
    taskName?: string;
    title: string;
    uri?: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSimpleResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBroadcastRequest extends $tea.Model {
    appId: string;
    deliveryType: number;
    expiredSeconds: number;
    extendedParams?: string;
    msgkey: string;
    notifyType?: string;
    pushAction?: number;
    pushStatus?: number;
    silent?: number;
    taskName?: string;
    templateKeyValue?: string;
    templateName: string;
    unBindPeriod?: number;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBroadcastResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushTemplateRequest extends $tea.Model {
    appId: string;
    deliveryType: number;
    expiredSeconds: number;
    extendedParams?: string;
    notifyType?: string;
    pushAction?: number;
    silent?: number;
    targetMsgkey: string;
    taskName?: string;
    templateKeyValue?: string;
    templateName: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushTemplateResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushMultipleRequest extends $tea.Model {
    appId: string;
    deliveryType: number;
    expiredSeconds: number;
    extendedParams?: string;
    notifyType?: string;
    pushAction?: number;
    silent?: number;
    targetMsg: PushMultipleRequestTargetMsg[];
    taskName?: string;
    templateName: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushMultipleResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcdpAimRequest extends $tea.Model {
    appId?: string;
    emptyTag?: string;
    keyword?: string;
    name?: string;
    pageNo?: number;
    pageSize?: number;
    sort?: string;
    sortField?: string;
    tenantId?: string;
    type?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcdpAimResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: ListMcdpAimResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveMgsApirestRequest extends $tea.Model {
    appId?: string;
    mpaasMappcenterMgsApirestSaveJsonStr?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveMgsApirestResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: SaveMgsApirestResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsTestreqbodyautogenRequest extends $tea.Model {
    appId?: string;
    format?: string;
    mpaasMappcenterMgsTestreqbodyautogenQueryJsonStr?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsTestreqbodyautogenResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestRequest extends $tea.Model {
    appId?: string;
    format?: string;
    id?: number;
    tenantId?: string;
    type?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: QueryMgsApirestResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiRequest extends $tea.Model {
    apiStatus?: string;
    apiType?: string;
    appId?: string;
    format?: string;
    host?: string;
    needEncrypt?: string;
    needEtag?: string;
    needSign?: string;
    operationType?: string;
    optFuzzy?: string;
    pageIndex?: number;
    pageSize?: number;
    sysId?: number;
    sysName?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: ListMgsApiResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageRequest extends $tea.Model {
    apiStatus?: string;
    apiType?: string;
    appId?: string;
    format?: string;
    host?: string;
    needEncrypt?: string;
    needEtag?: string;
    needSign?: string;
    operationType?: string;
    optFuzzy?: string;
    pageIndex?: number;
    pageSize?: number;
    sysId?: number;
    sysName?: string;
    tenantId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponse extends $tea.Model {
    requestId: string;
    resultCode: string;
    resultMessage: string;
    resultContent: QueryMgsApipageResponseResultContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMpaasAppInfoResponseResultContentData extends $tea.Model {
    appId: string;
    code: string;
    data: string;
    message: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMpaasAppInfoResponseResultContent extends $tea.Model {
    requestId: string;
    data: UpdateMpaasAppInfoResponseResultContentData;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RunMsaDiffResponseResultContent extends $tea.Model {
    code: string;
    data: string;
    message: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMsaEnhanceResponseResultContent extends $tea.Model {
    code: string;
    data: string;
    message: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyDataResponseResultContent extends $tea.Model {
    code: number;
    data: string;
    msg: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppHistoryDataResponseResultContent extends $tea.Model {
    code: number;
    data: string;
    msg: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMPaaSMasTinyAppDailyPageViewResponseResultContent extends $tea.Model {
    code: number;
    data: string;
    msg: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMPaaSMasTinyAppResponseResultContent extends $tea.Model {
    code: number;
    data: string;
    msg: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig extends $tea.Model {
    certRSA: string;
    packageName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig extends $tea.Model {
    bundleId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList extends $tea.Model {
    appDesc: string;
    appIcon: string;
    appId: string;
    appName: string;
    appSecret: string;
    creator: string;
    gmtCreate: string;
    gmtModified: string;
    id: number;
    modifier: string;
    monitorJson: string;
    status: number;
    tenantId: string;
    type: number;
    androidConfig: ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig;
    iosConfig: ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterAppsResponseListMappCenterAppResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    mappCenterAppList: ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList extends $tea.Model {
    compatibleId: string;
    createTime: string;
    displayName: string;
    id: string;
    region: string;
    status: string;
    tenantId: string;
    type: string;
    uid: number;
    updateTime: string;
    workspaceId: string;
    zones: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    userId: string;
    mappCenterWorkspaceList: ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig extends $tea.Model {
    certRSA: string;
    packageName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig extends $tea.Model {
    bundleId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp extends $tea.Model {
    appDesc: string;
    appIcon: string;
    appId: string;
    appName: string;
    appSecret: string;
    creator: string;
    gmtCreate: string;
    gmtModified: string;
    id: number;
    modifier: string;
    monitorJson: string;
    status: number;
    tenantId: string;
    type: number;
    androidConfig: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig;
    iosConfig: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMappCenterAppResponseQueryMappCenterAppResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    mappCenterApp: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult extends $tea.Model {
    configDownloadUrl: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData extends $tea.Model {
    bizRequestId: string;
    filePath: string;
    fileType: string;
    recordStartTime: string;
    status: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp extends $tea.Model {
    code: string;
    msg: string;
    data: DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData extends $tea.Model {
    bizRequestId: string;
    filePath: string;
    fileType: string;
    recordStartTime: string;
    status: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp extends $tea.Model {
    code: string;
    msg: string;
    data: QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList extends $tea.Model {
    appCode: string;
    gmtCreate: string;
    gmtModified: string;
    greyConfigInfo: string;
    greyEndtime: string;
    greyEndtimeData: string;
    greyNum: number;
    id: number;
    memo: string;
    packageId: number;
    platform: string;
    productVersion: string;
    publishMode: number;
    publishType: number;
    status: string;
    taskStatus: number;
    whitelistIds: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniTasksResponseListMiniTaskResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    miniTaskList: ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList extends $tea.Model {
    appCode: string;
    autoInstall: number;
    clientVersionMax: string;
    clientVersionMin: string;
    downloadUrl: string;
    extendInfo: string;
    extraData: string;
    fallbackBaseUrl: string;
    gmtCreate: string;
    gmtModified: string;
    h5Id: string;
    h5Name: string;
    h5Version: string;
    id: number;
    installType: number;
    mainUrl: string;
    memo: string;
    packageType: number;
    platform: string;
    publishPeriod: number;
    resourceType: number;
    status: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniPackagesResponseListMiniPackageResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    miniPackageList: ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMcubeFileTokenResponseGetFileTokenResultFileToken extends $tea.Model {
    accessid: string;
    dir: string;
    expire: string;
    host: string;
    policy: string;
    signature: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMcubeFileTokenResponseGetFileTokenResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    fileToken: GetMcubeFileTokenResponseGetFileTokenResultFileToken;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo extends $tea.Model {
    failNum: number;
    failUserIds: string;
    successNum: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMcubeWhitelistResponseAddWhitelistResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    addWhitelistInfo: UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeWhitelistResponseDeleteWhitelistResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniTaskResponseCreateMiniTaskResult extends $tea.Model {
    miniTaskId: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExistMcubeRsaKeyResponseCheckRsaKeyResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult extends $tea.Model {
    debugUrl: string;
    packageId: string;
    userId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeMiniPackageResponseUploadMiniPackageResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    returnPackageResult: UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo extends $tea.Model {
    appCode: string;
    gmtCreate: string;
    gmtModified: string;
    greyConfigInfo: string;
    greyEndtime: string;
    greyEndtimeData: string;
    greyNum: number;
    id: number;
    memo: string;
    packageId: number;
    platform: string;
    productVersion: string;
    publishMode: number;
    publishType: number;
    status: string;
    taskStatus: number;
    whitelistIds: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniTaskResponseQueryMiniTaskResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    miniTaskInfo: QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo extends $tea.Model {
    appCode: string;
    autoInstall: number;
    clientVersionMax: string;
    clientVersionMin: string;
    downloadUrl: string;
    extendInfo: string;
    extraData: string;
    fallbackBaseUrl: string;
    gmtCreate: string;
    gmtModified: string;
    h5Id: string;
    h5Name: string;
    h5Version: string;
    id: number;
    installType: number;
    mainUrl: string;
    memo: string;
    packageType: number;
    platform: string;
    publishPeriod: number;
    resourceType: number;
    status: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeMiniPackageResponseQueryMiniPackageResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    miniPackageInfo: QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadMcubeRsaKeyResponseUploadRsaResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMcubeMiniAppResponseDeleteMiniResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistResponseCreateWhitelistResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    whitelistId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    whitelistId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeVhostResponseCreateVhostResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMcubeMiniAppResponseCreateMiniResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMcubeVhostResponseQueryVhostResult extends $tea.Model {
    data: string;
    resultMsg: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniAppsResponseListMiniResultMiniProgramList extends $tea.Model {
    appCode: string;
    gmtCreate: string;
    gmtModified: string;
    h5Id: string;
    h5Name: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeMiniAppsResponseListMiniResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    miniProgramList: ListMcubeMiniAppsResponseListMiniResultMiniProgramList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeWhitelistsResponseListWhitelistResultWhitelists extends $tea.Model {
    appCode: string;
    gmtCreate: string;
    gmtModified: string;
    id: number;
    whitelistType: string;
    whiteListCount: number;
    whiteListName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcubeWhitelistsResponseListWhitelistResult extends $tea.Model {
    resultMsg: string;
    success: boolean;
    whitelists: ListMcubeWhitelistsResponseListWhitelistResultWhitelists[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushMultipleRequestTargetMsg extends $tea.Model {
    extendedParams?: string;
    msgKey: string;
    target: string;
    templateKeyValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMcdpAimResponseResultContent extends $tea.Model {
    code: string;
    data: string;
    message: string;
    success: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveMgsApirestResponseResultContent extends $tea.Model {
    errorMessage: string;
    success: boolean;
    value: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueHeaderRule extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueHeaderRules extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueRequestParams extends $tea.Model {
    apiId: string;
    appId: string;
    defaultValue: string;
    description: string;
    id: number;
    location: string;
    name: string;
    refType: string;
    type: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker extends $tea.Model {
    charset: string;
    contentType: string;
    host: string;
    method: string;
    path: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueApiInvoker extends $tea.Model {
    rpcInvoker: string;
    httpInvoker: QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueCacheRule extends $tea.Model {
    cacheKey: string;
    needCache: boolean;
    ttl: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueLimitRule extends $tea.Model {
    defaultResponse: string;
    i18nResponse: string;
    interval: number;
    limit: number;
    mode: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueMigrateRule extends $tea.Model {
    flowPercent: number;
    needMigrate: boolean;
    needSwitchCompletely: boolean;
    sysId: number;
    sysName: string;
    upstreamType: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValueMockRule extends $tea.Model {
    mockData: string;
    needMock: boolean;
    percentage: number;
    type: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContentValue extends $tea.Model {
    apiName: string;
    apiStatus: string;
    apiType: string;
    appId: string;
    authRuleName: string;
    charset: string;
    contentType: string;
    description: string;
    gmtCreate: string;
    gmtModified: string;
    host: string;
    id: number;
    interfaceType: string;
    method: string;
    methodName: string;
    needEncrypt: string;
    needETag: string;
    needJsonp: string;
    needSign: string;
    operationType: string;
    paramGetMethod: string;
    path: string;
    requestBodyModel: string;
    responseBodyModel: string;
    sysId: number;
    sysName: string;
    timeout: string;
    workspaceId: string;
    headerRule: QueryMgsApirestResponseResultContentValueHeaderRule[];
    headerRules: QueryMgsApirestResponseResultContentValueHeaderRules[];
    requestParams: QueryMgsApirestResponseResultContentValueRequestParams[];
    apiInvoker: QueryMgsApirestResponseResultContentValueApiInvoker;
    cacheRule: QueryMgsApirestResponseResultContentValueCacheRule;
    limitRule: QueryMgsApirestResponseResultContentValueLimitRule;
    migrateRule: QueryMgsApirestResponseResultContentValueMigrateRule;
    mockRule: QueryMgsApirestResponseResultContentValueMockRule;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApirestResponseResultContent extends $tea.Model {
    errorMessage: string;
    success: boolean;
    value: QueryMgsApirestResponseResultContentValue;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueHeaderRule extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueHeaderRules extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueRequestParams extends $tea.Model {
    apiId: string;
    appId: string;
    defaultValue: string;
    description: string;
    id: number;
    location: string;
    name: string;
    refType: string;
    type: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueApiInvokerHttpInvoker extends $tea.Model {
    charset: string;
    contentType: string;
    host: string;
    method: string;
    path: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueApiInvoker extends $tea.Model {
    rpcInvoker: string;
    httpInvoker: ListMgsApiResponseResultContentValueApiInvokerHttpInvoker;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueCacheRule extends $tea.Model {
    cacheKey: string;
    needCache: boolean;
    ttl: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueLimitRule extends $tea.Model {
    defaultResponse: string;
    i18nResponse: string;
    interval: number;
    limit: number;
    mode: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueMigrateRule extends $tea.Model {
    flowPercent: number;
    needMigrate: boolean;
    needSwitchCompletely: boolean;
    sysId: number;
    sysName: string;
    upstreamType: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValueMockRule extends $tea.Model {
    mockData: string;
    needMock: boolean;
    percentage: number;
    type: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContentValue extends $tea.Model {
    apiName: string;
    apiStatus: string;
    apiType: string;
    appId: string;
    authRuleName: string;
    charset: string;
    contentType: string;
    description: string;
    gmtCreate: string;
    gmtModified: string;
    host: string;
    id: number;
    interfaceType: string;
    method: string;
    methodName: string;
    needEncrypt: string;
    needETag: string;
    needJsonp: string;
    needSign: string;
    operationType: string;
    paramGetMethod: string;
    path: string;
    requestBodyModel: string;
    responseBodyModel: string;
    sysId: number;
    sysName: string;
    timeout: string;
    workspaceId: string;
    headerRule: ListMgsApiResponseResultContentValueHeaderRule[];
    headerRules: ListMgsApiResponseResultContentValueHeaderRules[];
    requestParams: ListMgsApiResponseResultContentValueRequestParams[];
    apiInvoker: ListMgsApiResponseResultContentValueApiInvoker;
    cacheRule: ListMgsApiResponseResultContentValueCacheRule;
    limitRule: ListMgsApiResponseResultContentValueLimitRule;
    migrateRule: ListMgsApiResponseResultContentValueMigrateRule;
    mockRule: ListMgsApiResponseResultContentValueMockRule;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMgsApiResponseResultContent extends $tea.Model {
    errorMessage: string;
    success: boolean;
    value: ListMgsApiResponseResultContentValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListHeaderRule extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListHeaderRules extends $tea.Model {
    headerKey: string;
    location: string;
    type: string;
    value: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListRequestParams extends $tea.Model {
    apiId: string;
    appId: string;
    defaultValue: string;
    description: string;
    id: number;
    location: string;
    name: string;
    refType: string;
    type: string;
    workspaceId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker extends $tea.Model {
    charset: string;
    contentType: string;
    host: string;
    method: string;
    path: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListApiInvoker extends $tea.Model {
    rpcInvoker: string;
    httpInvoker: QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListCacheRule extends $tea.Model {
    cacheKey: string;
    needCache: boolean;
    ttl: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListLimitRule extends $tea.Model {
    defaultResponse: string;
    i18nResponse: string;
    interval: number;
    limit: number;
    mode: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListMigrateRule extends $tea.Model {
    flowPercent: number;
    needMigrate: boolean;
    needSwitchCompletely: boolean;
    sysId: number;
    sysName: string;
    upstreamType: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentListMockRule extends $tea.Model {
    mockData: string;
    needMock: boolean;
    percentage: number;
    type: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContentList extends $tea.Model {
    apiName: string;
    apiStatus: string;
    apiType: string;
    appId: string;
    authRuleName: string;
    charset: string;
    contentType: string;
    description: string;
    gmtCreate: string;
    gmtModified: string;
    host: string;
    id: number;
    interfaceType: string;
    method: string;
    methodName: string;
    needEncrypt: string;
    needETag: string;
    needJsonp: string;
    needSign: string;
    operationType: string;
    paramGetMethod: string;
    path: string;
    requestBodyModel: string;
    responseBodyModel: string;
    sysId: number;
    sysName: string;
    timeout: string;
    workspaceId: string;
    headerRule: QueryMgsApipageResponseResultContentListHeaderRule[];
    headerRules: QueryMgsApipageResponseResultContentListHeaderRules[];
    requestParams: QueryMgsApipageResponseResultContentListRequestParams[];
    apiInvoker: QueryMgsApipageResponseResultContentListApiInvoker;
    cacheRule: QueryMgsApipageResponseResultContentListCacheRule;
    limitRule: QueryMgsApipageResponseResultContentListLimitRule;
    migrateRule: QueryMgsApipageResponseResultContentListMigrateRule;
    mockRule: QueryMgsApipageResponseResultContentListMockRule;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMgsApipageResponseResultContent extends $tea.Model {
    current: number;
    pageSize: number;
    total: number;
    list: QueryMgsApipageResponseResultContentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends RPC {
    constructor(config: $RPC.Config);
    updateMpaasAppInfoWithOptions(request: UpdateMpaasAppInfoRequest, runtime: $Util.RuntimeOptions): Promise<UpdateMpaasAppInfoResponse>;
    updateMpaasAppInfo(request: UpdateMpaasAppInfoRequest): Promise<UpdateMpaasAppInfoResponse>;
    runMsaDiffWithOptions(request: RunMsaDiffRequest, runtime: $Util.RuntimeOptions): Promise<RunMsaDiffResponse>;
    runMsaDiff(request: RunMsaDiffRequest): Promise<RunMsaDiffResponse>;
    createMsaEnhanceWithOptions(request: CreateMsaEnhanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateMsaEnhanceResponse>;
    createMsaEnhance(request: CreateMsaEnhanceRequest): Promise<CreateMsaEnhanceResponse>;
    queryMPaaSMasTinyAppDailyDataWithOptions(request: QueryMPaaSMasTinyAppDailyDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryMPaaSMasTinyAppDailyDataResponse>;
    queryMPaaSMasTinyAppDailyData(request: QueryMPaaSMasTinyAppDailyDataRequest): Promise<QueryMPaaSMasTinyAppDailyDataResponse>;
    queryMPaaSMasTinyAppHistoryDataWithOptions(request: QueryMPaaSMasTinyAppHistoryDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryMPaaSMasTinyAppHistoryDataResponse>;
    queryMPaaSMasTinyAppHistoryData(request: QueryMPaaSMasTinyAppHistoryDataRequest): Promise<QueryMPaaSMasTinyAppHistoryDataResponse>;
    queryMPaaSMasTinyAppDailyPageViewWithOptions(request: QueryMPaaSMasTinyAppDailyPageViewRequest, runtime: $Util.RuntimeOptions): Promise<QueryMPaaSMasTinyAppDailyPageViewResponse>;
    queryMPaaSMasTinyAppDailyPageView(request: QueryMPaaSMasTinyAppDailyPageViewRequest): Promise<QueryMPaaSMasTinyAppDailyPageViewResponse>;
    listMPaaSMasTinyAppWithOptions(request: ListMPaaSMasTinyAppRequest, runtime: $Util.RuntimeOptions): Promise<ListMPaaSMasTinyAppResponse>;
    listMPaaSMasTinyApp(request: ListMPaaSMasTinyAppRequest): Promise<ListMPaaSMasTinyAppResponse>;
    listMappCenterAppsWithOptions(request: ListMappCenterAppsRequest, runtime: $Util.RuntimeOptions): Promise<ListMappCenterAppsResponse>;
    listMappCenterApps(request: ListMappCenterAppsRequest): Promise<ListMappCenterAppsResponse>;
    listMappCenterWorkspacesWithOptions(request: ListMappCenterWorkspacesRequest, runtime: $Util.RuntimeOptions): Promise<ListMappCenterWorkspacesResponse>;
    listMappCenterWorkspaces(request: ListMappCenterWorkspacesRequest): Promise<ListMappCenterWorkspacesResponse>;
    queryMappCenterAppWithOptions(request: QueryMappCenterAppRequest, runtime: $Util.RuntimeOptions): Promise<QueryMappCenterAppResponse>;
    queryMappCenterApp(request: QueryMappCenterAppRequest): Promise<QueryMappCenterAppResponse>;
    exportMappCenterAppConfigWithOptions(request: ExportMappCenterAppConfigRequest, runtime: $Util.RuntimeOptions): Promise<ExportMappCenterAppConfigResponse>;
    exportMappCenterAppConfig(request: ExportMappCenterAppConfigRequest): Promise<ExportMappCenterAppConfigResponse>;
    deleteMpaasMrtcArtvcRecordfileWithOptions(request: DeleteMpaasMrtcArtvcRecordfileRequest, runtime: $Util.RuntimeOptions): Promise<DeleteMpaasMrtcArtvcRecordfileResponse>;
    deleteMpaasMrtcArtvcRecordfile(request: DeleteMpaasMrtcArtvcRecordfileRequest): Promise<DeleteMpaasMrtcArtvcRecordfileResponse>;
    queryMpaasMrtcArtvcRecordfileWithOptions(request: QueryMpaasMrtcArtvcRecordfileRequest, runtime: $Util.RuntimeOptions): Promise<QueryMpaasMrtcArtvcRecordfileResponse>;
    queryMpaasMrtcArtvcRecordfile(request: QueryMpaasMrtcArtvcRecordfileRequest): Promise<QueryMpaasMrtcArtvcRecordfileResponse>;
    listMcubeMiniTasksWithOptions(request: ListMcubeMiniTasksRequest, runtime: $Util.RuntimeOptions): Promise<ListMcubeMiniTasksResponse>;
    listMcubeMiniTasks(request: ListMcubeMiniTasksRequest): Promise<ListMcubeMiniTasksResponse>;
    listMcubeMiniPackagesWithOptions(request: ListMcubeMiniPackagesRequest, runtime: $Util.RuntimeOptions): Promise<ListMcubeMiniPackagesResponse>;
    listMcubeMiniPackages(request: ListMcubeMiniPackagesRequest): Promise<ListMcubeMiniPackagesResponse>;
    getMcubeFileTokenWithOptions(request: GetMcubeFileTokenRequest, runtime: $Util.RuntimeOptions): Promise<GetMcubeFileTokenResponse>;
    getMcubeFileToken(request: GetMcubeFileTokenRequest): Promise<GetMcubeFileTokenResponse>;
    updateMcubeWhitelistWithOptions(request: UpdateMcubeWhitelistRequest, runtime: $Util.RuntimeOptions): Promise<UpdateMcubeWhitelistResponse>;
    updateMcubeWhitelist(request: UpdateMcubeWhitelistRequest): Promise<UpdateMcubeWhitelistResponse>;
    deleteMcubeWhitelistWithOptions(request: DeleteMcubeWhitelistRequest, runtime: $Util.RuntimeOptions): Promise<DeleteMcubeWhitelistResponse>;
    deleteMcubeWhitelist(request: DeleteMcubeWhitelistRequest): Promise<DeleteMcubeWhitelistResponse>;
    createMcubeMiniTaskWithOptions(request: CreateMcubeMiniTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateMcubeMiniTaskResponse>;
    createMcubeMiniTask(request: CreateMcubeMiniTaskRequest): Promise<CreateMcubeMiniTaskResponse>;
    existMcubeRsaKeyWithOptions(request: ExistMcubeRsaKeyRequest, runtime: $Util.RuntimeOptions): Promise<ExistMcubeRsaKeyResponse>;
    existMcubeRsaKey(request: ExistMcubeRsaKeyRequest): Promise<ExistMcubeRsaKeyResponse>;
    uploadMcubeMiniPackageWithOptions(request: UploadMcubeMiniPackageRequest, runtime: $Util.RuntimeOptions): Promise<UploadMcubeMiniPackageResponse>;
    uploadMcubeMiniPackage(request: UploadMcubeMiniPackageRequest): Promise<UploadMcubeMiniPackageResponse>;
    queryMcubeMiniTaskWithOptions(request: QueryMcubeMiniTaskRequest, runtime: $Util.RuntimeOptions): Promise<QueryMcubeMiniTaskResponse>;
    queryMcubeMiniTask(request: QueryMcubeMiniTaskRequest): Promise<QueryMcubeMiniTaskResponse>;
    queryMcubeMiniPackageWithOptions(request: QueryMcubeMiniPackageRequest, runtime: $Util.RuntimeOptions): Promise<QueryMcubeMiniPackageResponse>;
    queryMcubeMiniPackage(request: QueryMcubeMiniPackageRequest): Promise<QueryMcubeMiniPackageResponse>;
    uploadMcubeRsaKeyWithOptions(request: UploadMcubeRsaKeyRequest, runtime: $Util.RuntimeOptions): Promise<UploadMcubeRsaKeyResponse>;
    uploadMcubeRsaKey(request: UploadMcubeRsaKeyRequest): Promise<UploadMcubeRsaKeyResponse>;
    deleteMcubeMiniAppWithOptions(request: DeleteMcubeMiniAppRequest, runtime: $Util.RuntimeOptions): Promise<DeleteMcubeMiniAppResponse>;
    deleteMcubeMiniApp(request: DeleteMcubeMiniAppRequest): Promise<DeleteMcubeMiniAppResponse>;
    createMcubeWhitelistWithOptions(request: CreateMcubeWhitelistRequest, runtime: $Util.RuntimeOptions): Promise<CreateMcubeWhitelistResponse>;
    createMcubeWhitelist(request: CreateMcubeWhitelistRequest): Promise<CreateMcubeWhitelistResponse>;
    createMcubeWhitelistForIdeWithOptions(request: CreateMcubeWhitelistForIdeRequest, runtime: $Util.RuntimeOptions): Promise<CreateMcubeWhitelistForIdeResponse>;
    createMcubeWhitelistForIde(request: CreateMcubeWhitelistForIdeRequest): Promise<CreateMcubeWhitelistForIdeResponse>;
    changeMcubeMiniTaskStatusWithOptions(request: ChangeMcubeMiniTaskStatusRequest, runtime: $Util.RuntimeOptions): Promise<ChangeMcubeMiniTaskStatusResponse>;
    changeMcubeMiniTaskStatus(request: ChangeMcubeMiniTaskStatusRequest): Promise<ChangeMcubeMiniTaskStatusResponse>;
    createMcubeVhostWithOptions(request: CreateMcubeVhostRequest, runtime: $Util.RuntimeOptions): Promise<CreateMcubeVhostResponse>;
    createMcubeVhost(request: CreateMcubeVhostRequest): Promise<CreateMcubeVhostResponse>;
    createMcubeMiniAppWithOptions(request: CreateMcubeMiniAppRequest, runtime: $Util.RuntimeOptions): Promise<CreateMcubeMiniAppResponse>;
    createMcubeMiniApp(request: CreateMcubeMiniAppRequest): Promise<CreateMcubeMiniAppResponse>;
    queryMcubeVhostWithOptions(request: QueryMcubeVhostRequest, runtime: $Util.RuntimeOptions): Promise<QueryMcubeVhostResponse>;
    queryMcubeVhost(request: QueryMcubeVhostRequest): Promise<QueryMcubeVhostResponse>;
    listMcubeMiniAppsWithOptions(request: ListMcubeMiniAppsRequest, runtime: $Util.RuntimeOptions): Promise<ListMcubeMiniAppsResponse>;
    listMcubeMiniApps(request: ListMcubeMiniAppsRequest): Promise<ListMcubeMiniAppsResponse>;
    listMcubeWhitelistsWithOptions(request: ListMcubeWhitelistsRequest, runtime: $Util.RuntimeOptions): Promise<ListMcubeWhitelistsResponse>;
    listMcubeWhitelists(request: ListMcubeWhitelistsRequest): Promise<ListMcubeWhitelistsResponse>;
    createOpenSingleDataWithOptions(request: CreateOpenSingleDataRequest, runtime: $Util.RuntimeOptions): Promise<CreateOpenSingleDataResponse>;
    createOpenSingleData(request: CreateOpenSingleDataRequest): Promise<CreateOpenSingleDataResponse>;
    createOpenGlobalDataWithOptions(request: CreateOpenGlobalDataRequest, runtime: $Util.RuntimeOptions): Promise<CreateOpenGlobalDataResponse>;
    createOpenGlobalData(request: CreateOpenGlobalDataRequest): Promise<CreateOpenGlobalDataResponse>;
    pushSimpleWithOptions(request: PushSimpleRequest, runtime: $Util.RuntimeOptions): Promise<PushSimpleResponse>;
    pushSimple(request: PushSimpleRequest): Promise<PushSimpleResponse>;
    pushBroadcastWithOptions(request: PushBroadcastRequest, runtime: $Util.RuntimeOptions): Promise<PushBroadcastResponse>;
    pushBroadcast(request: PushBroadcastRequest): Promise<PushBroadcastResponse>;
    pushTemplateWithOptions(request: PushTemplateRequest, runtime: $Util.RuntimeOptions): Promise<PushTemplateResponse>;
    pushTemplate(request: PushTemplateRequest): Promise<PushTemplateResponse>;
    pushMultipleWithOptions(request: PushMultipleRequest, runtime: $Util.RuntimeOptions): Promise<PushMultipleResponse>;
    pushMultiple(request: PushMultipleRequest): Promise<PushMultipleResponse>;
    listMcdpAimWithOptions(request: ListMcdpAimRequest, runtime: $Util.RuntimeOptions): Promise<ListMcdpAimResponse>;
    listMcdpAim(request: ListMcdpAimRequest): Promise<ListMcdpAimResponse>;
    saveMgsApirestWithOptions(request: SaveMgsApirestRequest, runtime: $Util.RuntimeOptions): Promise<SaveMgsApirestResponse>;
    saveMgsApirest(request: SaveMgsApirestRequest): Promise<SaveMgsApirestResponse>;
    queryMgsTestreqbodyautogenWithOptions(request: QueryMgsTestreqbodyautogenRequest, runtime: $Util.RuntimeOptions): Promise<QueryMgsTestreqbodyautogenResponse>;
    queryMgsTestreqbodyautogen(request: QueryMgsTestreqbodyautogenRequest): Promise<QueryMgsTestreqbodyautogenResponse>;
    queryMgsApirestWithOptions(request: QueryMgsApirestRequest, runtime: $Util.RuntimeOptions): Promise<QueryMgsApirestResponse>;
    queryMgsApirest(request: QueryMgsApirestRequest): Promise<QueryMgsApirestResponse>;
    listMgsApiWithOptions(request: ListMgsApiRequest, runtime: $Util.RuntimeOptions): Promise<ListMgsApiResponse>;
    listMgsApi(request: ListMgsApiRequest): Promise<ListMgsApiResponse>;
    queryMgsApipageWithOptions(request: QueryMgsApipageRequest, runtime: $Util.RuntimeOptions): Promise<QueryMgsApipageResponse>;
    queryMgsApipage(request: QueryMgsApipageRequest): Promise<QueryMgsApipageResponse>;
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
}
