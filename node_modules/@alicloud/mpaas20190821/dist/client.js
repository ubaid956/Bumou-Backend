"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const rpc_client_1 = __importDefault(require("@alicloud/rpc-client"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class UpdateMpaasAppInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            iconFileUrl: 'IconFileUrl',
            identifier: 'Identifier',
            onexFlag: 'OnexFlag',
            systemType: 'SystemType',
            tenantId: 'TenantId',
        };
    }
    static types() {
        return {
            appId: 'string',
            appName: 'string',
            iconFileUrl: 'string',
            identifier: 'string',
            onexFlag: 'boolean',
            systemType: 'string',
            tenantId: 'string',
        };
    }
}
exports.UpdateMpaasAppInfoRequest = UpdateMpaasAppInfoRequest;
class UpdateMpaasAppInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: UpdateMpaasAppInfoResponseResultContent,
        };
    }
}
exports.UpdateMpaasAppInfoResponse = UpdateMpaasAppInfoResponse;
class RunMsaDiffRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            mpaasMappcenterMsaDiffRunJsonStr: 'MpaasMappcenterMsaDiffRunJsonStr',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            mpaasMappcenterMsaDiffRunJsonStr: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.RunMsaDiffRequest = RunMsaDiffRequest;
class RunMsaDiffResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: RunMsaDiffResponseResultContent,
        };
    }
}
exports.RunMsaDiffResponse = RunMsaDiffResponse;
class CreateMsaEnhanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            mpaasMappcenterMsaEnhanceCreateJsonStr: 'MpaasMappcenterMsaEnhanceCreateJsonStr',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            mpaasMappcenterMsaEnhanceCreateJsonStr: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMsaEnhanceRequest = CreateMsaEnhanceRequest;
class CreateMsaEnhanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: CreateMsaEnhanceResponseResultContent,
        };
    }
}
exports.CreateMsaEnhanceResponse = CreateMsaEnhanceResponse;
class QueryMPaaSMasTinyAppDailyDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            date: 'Date',
            tenantId: 'TenantId',
            tinyAppId: 'TinyAppId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            date: 'string',
            tenantId: 'string',
            tinyAppId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyDataRequest = QueryMPaaSMasTinyAppDailyDataRequest;
class QueryMPaaSMasTinyAppDailyDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: QueryMPaaSMasTinyAppDailyDataResponseResultContent,
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyDataResponse = QueryMPaaSMasTinyAppDailyDataResponse;
class QueryMPaaSMasTinyAppHistoryDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            date: 'Date',
            tenantId: 'TenantId',
            tinyAppId: 'TinyAppId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            date: 'string',
            tenantId: 'string',
            tinyAppId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppHistoryDataRequest = QueryMPaaSMasTinyAppHistoryDataRequest;
class QueryMPaaSMasTinyAppHistoryDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: QueryMPaaSMasTinyAppHistoryDataResponseResultContent,
        };
    }
}
exports.QueryMPaaSMasTinyAppHistoryDataResponse = QueryMPaaSMasTinyAppHistoryDataResponse;
class QueryMPaaSMasTinyAppDailyPageViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            date: 'Date',
            keyword: 'Keyword',
            order: 'Order',
            orderCol: 'OrderCol',
            pageLen: 'PageLen',
            pageNum: 'PageNum',
            tenantId: 'TenantId',
            tinyAppId: 'TinyAppId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            date: 'string',
            keyword: 'string',
            order: 'string',
            orderCol: 'string',
            pageLen: 'string',
            pageNum: 'string',
            tenantId: 'string',
            tinyAppId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyPageViewRequest = QueryMPaaSMasTinyAppDailyPageViewRequest;
class QueryMPaaSMasTinyAppDailyPageViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: QueryMPaaSMasTinyAppDailyPageViewResponseResultContent,
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyPageViewResponse = QueryMPaaSMasTinyAppDailyPageViewResponse;
class ListMPaaSMasTinyAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMPaaSMasTinyAppRequest = ListMPaaSMasTinyAppRequest;
class ListMPaaSMasTinyAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: ListMPaaSMasTinyAppResponseResultContent,
        };
    }
}
exports.ListMPaaSMasTinyAppResponse = ListMPaaSMasTinyAppResponse;
class ListMappCenterAppsRequest extends $tea.Model {
    static names() {
        return {};
    }
    static types() {
        return {};
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMappCenterAppsRequest = ListMappCenterAppsRequest;
class ListMappCenterAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listMappCenterAppResult: 'ListMappCenterAppResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listMappCenterAppResult: ListMappCenterAppsResponseListMappCenterAppResult,
        };
    }
}
exports.ListMappCenterAppsResponse = ListMappCenterAppsResponse;
class ListMappCenterWorkspacesRequest extends $tea.Model {
    static names() {
        return {};
    }
    static types() {
        return {};
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMappCenterWorkspacesRequest = ListMappCenterWorkspacesRequest;
class ListMappCenterWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listMappCenterWorkspaceResult: 'ListMappCenterWorkspaceResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listMappCenterWorkspaceResult: ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult,
        };
    }
}
exports.ListMappCenterWorkspacesResponse = ListMappCenterWorkspacesResponse;
class QueryMappCenterAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMappCenterAppRequest = QueryMappCenterAppRequest;
class QueryMappCenterAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            queryMappCenterAppResult: 'QueryMappCenterAppResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            queryMappCenterAppResult: QueryMappCenterAppResponseQueryMappCenterAppResult,
        };
    }
}
exports.QueryMappCenterAppResponse = QueryMappCenterAppResponse;
class ExportMappCenterAppConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            certRsaBase64: 'CertRsaBase64',
            identifier: 'Identifier',
            onexFlag: 'OnexFlag',
            systemType: 'SystemType',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            certRsaBase64: 'string',
            identifier: 'string',
            onexFlag: 'boolean',
            systemType: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ExportMappCenterAppConfigRequest = ExportMappCenterAppConfigRequest;
class ExportMappCenterAppConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            exportMappCenterAppConfigResult: 'ExportMappCenterAppConfigResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            exportMappCenterAppConfigResult: ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult,
        };
    }
}
exports.ExportMappCenterAppConfigResponse = ExportMappCenterAppConfigResponse;
class DeleteMpaasMrtcArtvcRecordfileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            bizAppCode: 'BizAppCode',
            bizName: 'BizName',
            bizRequestId: 'BizRequestId',
            mediaType: 'MediaType',
            recordId: 'RecordId',
            roomId: 'RoomId',
            s: 'S',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            bizAppCode: 'string',
            bizName: 'string',
            bizRequestId: 'string',
            mediaType: 'string',
            recordId: 'string',
            roomId: 'string',
            s: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.DeleteMpaasMrtcArtvcRecordfileRequest = DeleteMpaasMrtcArtvcRecordfileRequest;
class DeleteMpaasMrtcArtvcRecordfileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            mrtcApiRecordFileQueryWrapResp: 'MrtcApiRecordFileQueryWrapResp',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            mrtcApiRecordFileQueryWrapResp: DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp,
        };
    }
}
exports.DeleteMpaasMrtcArtvcRecordfileResponse = DeleteMpaasMrtcArtvcRecordfileResponse;
class QueryMpaasMrtcArtvcRecordfileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            bizAppCode: 'BizAppCode',
            bizName: 'BizName',
            bizRequestId: 'BizRequestId',
            mediaType: 'MediaType',
            recordId: 'RecordId',
            roomId: 'RoomId',
            s: 'S',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            bizAppCode: 'string',
            bizName: 'string',
            bizRequestId: 'string',
            mediaType: 'string',
            recordId: 'string',
            roomId: 'string',
            s: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMpaasMrtcArtvcRecordfileRequest = QueryMpaasMrtcArtvcRecordfileRequest;
class QueryMpaasMrtcArtvcRecordfileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            mrtcApiRecordFileQueryWrapResp: 'MrtcApiRecordFileQueryWrapResp',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            mrtcApiRecordFileQueryWrapResp: QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp,
        };
    }
}
exports.QueryMpaasMrtcArtvcRecordfileResponse = QueryMpaasMrtcArtvcRecordfileResponse;
class ListMcubeMiniTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            id: 'Id',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            id: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMcubeMiniTasksRequest = ListMcubeMiniTasksRequest;
class ListMcubeMiniTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listMiniTaskResult: 'ListMiniTaskResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listMiniTaskResult: ListMcubeMiniTasksResponseListMiniTaskResult,
        };
    }
}
exports.ListMcubeMiniTasksResponse = ListMcubeMiniTasksResponse;
class ListMcubeMiniPackagesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            h5Id: 'H5Id',
            packageTypes: 'PackageTypes',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            h5Id: 'string',
            packageTypes: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMcubeMiniPackagesRequest = ListMcubeMiniPackagesRequest;
class ListMcubeMiniPackagesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listMiniPackageResult: 'ListMiniPackageResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listMiniPackageResult: ListMcubeMiniPackagesResponseListMiniPackageResult,
        };
    }
}
exports.ListMcubeMiniPackagesResponse = ListMcubeMiniPackagesResponse;
class GetMcubeFileTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            onexFlag: 'OnexFlag',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            onexFlag: 'boolean',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.GetMcubeFileTokenRequest = GetMcubeFileTokenRequest;
class GetMcubeFileTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            getFileTokenResult: 'GetFileTokenResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            getFileTokenResult: GetMcubeFileTokenResponseGetFileTokenResult,
        };
    }
}
exports.GetMcubeFileTokenResponse = GetMcubeFileTokenResponse;
class UpdateMcubeWhitelistRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            id: 'Id',
            keyIds: 'KeyIds',
            onexFlag: 'OnexFlag',
            ossUrl: 'OssUrl',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            id: 'string',
            keyIds: 'string',
            onexFlag: 'boolean',
            ossUrl: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.UpdateMcubeWhitelistRequest = UpdateMcubeWhitelistRequest;
class UpdateMcubeWhitelistResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            addWhitelistResult: 'AddWhitelistResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            addWhitelistResult: UpdateMcubeWhitelistResponseAddWhitelistResult,
        };
    }
}
exports.UpdateMcubeWhitelistResponse = UpdateMcubeWhitelistResponse;
class DeleteMcubeWhitelistRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            id: 'Id',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            id: 'number',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.DeleteMcubeWhitelistRequest = DeleteMcubeWhitelistRequest;
class DeleteMcubeWhitelistResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            deleteWhitelistResult: 'DeleteWhitelistResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            deleteWhitelistResult: DeleteMcubeWhitelistResponseDeleteWhitelistResult,
        };
    }
}
exports.DeleteMcubeWhitelistResponse = DeleteMcubeWhitelistResponse;
class CreateMcubeMiniTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            greyConfigInfo: 'GreyConfigInfo',
            greyEndtimeData: 'GreyEndtimeData',
            greyNum: 'GreyNum',
            memo: 'Memo',
            packageId: 'PackageId',
            publishMode: 'PublishMode',
            publishType: 'PublishType',
            tenantId: 'TenantId',
            whitelistIds: 'WhitelistIds',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            greyConfigInfo: 'string',
            greyEndtimeData: 'string',
            greyNum: 'number',
            memo: 'string',
            packageId: 'number',
            publishMode: 'number',
            publishType: 'number',
            tenantId: 'string',
            whitelistIds: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMcubeMiniTaskRequest = CreateMcubeMiniTaskRequest;
class CreateMcubeMiniTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            createMiniTaskResult: 'CreateMiniTaskResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            createMiniTaskResult: CreateMcubeMiniTaskResponseCreateMiniTaskResult,
        };
    }
}
exports.CreateMcubeMiniTaskResponse = CreateMcubeMiniTaskResponse;
class ExistMcubeRsaKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ExistMcubeRsaKeyRequest = ExistMcubeRsaKeyRequest;
class ExistMcubeRsaKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            checkRsaKeyResult: 'CheckRsaKeyResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            checkRsaKeyResult: ExistMcubeRsaKeyResponseCheckRsaKeyResult,
        };
    }
}
exports.ExistMcubeRsaKeyResponse = ExistMcubeRsaKeyResponse;
class UploadMcubeMiniPackageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            autoInstall: 'AutoInstall',
            clientVersionMax: 'ClientVersionMax',
            clientVersionMin: 'ClientVersionMin',
            enableKeepAlive: 'EnableKeepAlive',
            enableOptionMenu: 'EnableOptionMenu',
            enableTabBar: 'EnableTabBar',
            extendInfo: 'ExtendInfo',
            h5Id: 'H5Id',
            h5Name: 'H5Name',
            h5Version: 'H5Version',
            iconFileUrl: 'IconFileUrl',
            installType: 'InstallType',
            mainUrl: 'MainUrl',
            onexFlag: 'OnexFlag',
            packageType: 'PackageType',
            platform: 'Platform',
            resourceFileUrl: 'ResourceFileUrl',
            resourceType: 'ResourceType',
            tenantId: 'TenantId',
            userId: 'UserId',
            uuid: 'Uuid',
            vhost: 'Vhost',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            autoInstall: 'number',
            clientVersionMax: 'string',
            clientVersionMin: 'string',
            enableKeepAlive: 'string',
            enableOptionMenu: 'string',
            enableTabBar: 'number',
            extendInfo: 'string',
            h5Id: 'string',
            h5Name: 'string',
            h5Version: 'string',
            iconFileUrl: 'string',
            installType: 'number',
            mainUrl: 'string',
            onexFlag: 'boolean',
            packageType: 'number',
            platform: 'string',
            resourceFileUrl: 'string',
            resourceType: 'number',
            tenantId: 'string',
            userId: 'string',
            uuid: 'string',
            vhost: 'string',
            workspaceId: 'string',
        };
    }
}
exports.UploadMcubeMiniPackageRequest = UploadMcubeMiniPackageRequest;
class UploadMcubeMiniPackageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            uploadMiniPackageResult: 'UploadMiniPackageResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            uploadMiniPackageResult: UploadMcubeMiniPackageResponseUploadMiniPackageResult,
        };
    }
}
exports.UploadMcubeMiniPackageResponse = UploadMcubeMiniPackageResponse;
class QueryMcubeMiniTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            taskId: 'TaskId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            taskId: 'number',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMcubeMiniTaskRequest = QueryMcubeMiniTaskRequest;
class QueryMcubeMiniTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            queryMiniTaskResult: 'QueryMiniTaskResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            queryMiniTaskResult: QueryMcubeMiniTaskResponseQueryMiniTaskResult,
        };
    }
}
exports.QueryMcubeMiniTaskResponse = QueryMcubeMiniTaskResponse;
class QueryMcubeMiniPackageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            h5Id: 'H5Id',
            id: 'Id',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            h5Id: 'string',
            id: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMcubeMiniPackageRequest = QueryMcubeMiniPackageRequest;
class QueryMcubeMiniPackageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            queryMiniPackageResult: 'QueryMiniPackageResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            queryMiniPackageResult: QueryMcubeMiniPackageResponseQueryMiniPackageResult,
        };
    }
}
exports.QueryMcubeMiniPackageResponse = QueryMcubeMiniPackageResponse;
class UploadMcubeRsaKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            fileUrl: 'FileUrl',
            onexFlag: 'OnexFlag',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            fileUrl: 'string',
            onexFlag: 'boolean',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.UploadMcubeRsaKeyRequest = UploadMcubeRsaKeyRequest;
class UploadMcubeRsaKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            uploadRsaResult: 'UploadRsaResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            uploadRsaResult: UploadMcubeRsaKeyResponseUploadRsaResult,
        };
    }
}
exports.UploadMcubeRsaKeyResponse = UploadMcubeRsaKeyResponse;
class DeleteMcubeMiniAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            h5Id: 'H5Id',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            h5Id: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.DeleteMcubeMiniAppRequest = DeleteMcubeMiniAppRequest;
class DeleteMcubeMiniAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            deleteMiniResult: 'DeleteMiniResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            deleteMiniResult: DeleteMcubeMiniAppResponseDeleteMiniResult,
        };
    }
}
exports.DeleteMcubeMiniAppResponse = DeleteMcubeMiniAppResponse;
class CreateMcubeWhitelistRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            whitelistType: 'WhitelistType',
            whiteListName: 'WhiteListName',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            whitelistType: 'string',
            whiteListName: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMcubeWhitelistRequest = CreateMcubeWhitelistRequest;
class CreateMcubeWhitelistResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            createWhitelistResult: 'CreateWhitelistResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            createWhitelistResult: CreateMcubeWhitelistResponseCreateWhitelistResult,
        };
    }
}
exports.CreateMcubeWhitelistResponse = CreateMcubeWhitelistResponse;
class CreateMcubeWhitelistForIdeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            userId: 'UserId',
            whitelistValue: 'WhitelistValue',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            userId: 'string',
            whitelistValue: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMcubeWhitelistForIdeRequest = CreateMcubeWhitelistForIdeRequest;
class CreateMcubeWhitelistForIdeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            createWhitelistForIdeResult: 'CreateWhitelistForIdeResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            createWhitelistForIdeResult: CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult,
        };
    }
}
exports.CreateMcubeWhitelistForIdeResponse = CreateMcubeWhitelistForIdeResponse;
class ChangeMcubeMiniTaskStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            bizType: 'BizType',
            packageId: 'PackageId',
            taskId: 'TaskId',
            taskStatus: 'TaskStatus',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            bizType: 'string',
            packageId: 'number',
            taskId: 'number',
            taskStatus: 'number',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ChangeMcubeMiniTaskStatusRequest = ChangeMcubeMiniTaskStatusRequest;
class ChangeMcubeMiniTaskStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            changeMiniTaskStatusResult: 'ChangeMiniTaskStatusResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            changeMiniTaskStatusResult: ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult,
        };
    }
}
exports.ChangeMcubeMiniTaskStatusResponse = ChangeMcubeMiniTaskStatusResponse;
class CreateMcubeVhostRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            vhost: 'Vhost',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            vhost: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMcubeVhostRequest = CreateMcubeVhostRequest;
class CreateMcubeVhostResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            createVhostResult: 'CreateVhostResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            createVhostResult: CreateMcubeVhostResponseCreateVhostResult,
        };
    }
}
exports.CreateMcubeVhostResponse = CreateMcubeVhostResponse;
class CreateMcubeMiniAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            h5Id: 'H5Id',
            h5Name: 'H5Name',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            h5Id: 'string',
            h5Name: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateMcubeMiniAppRequest = CreateMcubeMiniAppRequest;
class CreateMcubeMiniAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            createMiniResult: 'CreateMiniResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            createMiniResult: CreateMcubeMiniAppResponseCreateMiniResult,
        };
    }
}
exports.CreateMcubeMiniAppResponse = CreateMcubeMiniAppResponse;
class QueryMcubeVhostRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMcubeVhostRequest = QueryMcubeVhostRequest;
class QueryMcubeVhostResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            queryVhostResult: 'QueryVhostResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            queryVhostResult: QueryMcubeVhostResponseQueryVhostResult,
        };
    }
}
exports.QueryMcubeVhostResponse = QueryMcubeVhostResponse;
class ListMcubeMiniAppsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMcubeMiniAppsRequest = ListMcubeMiniAppsRequest;
class ListMcubeMiniAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listMiniResult: 'ListMiniResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listMiniResult: ListMcubeMiniAppsResponseListMiniResult,
        };
    }
}
exports.ListMcubeMiniAppsResponse = ListMcubeMiniAppsResponse;
class ListMcubeWhitelistsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMcubeWhitelistsRequest = ListMcubeWhitelistsRequest;
class ListMcubeWhitelistsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            listWhitelistResult: 'ListWhitelistResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            listWhitelistResult: ListMcubeWhitelistsResponseListWhitelistResult,
        };
    }
}
exports.ListMcubeWhitelistsResponse = ListMcubeWhitelistsResponse;
class CreateOpenSingleDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appMaxVersion: 'AppMaxVersion',
            appMinVersion: 'AppMinVersion',
            bizType: 'BizType',
            checkOnline: 'CheckOnline',
            extAttrStr: 'ExtAttrStr',
            linkToken: 'LinkToken',
            osType: 'OsType',
            payload: 'Payload',
            thirdMsgId: 'ThirdMsgId',
            validTimeEnd: 'ValidTimeEnd',
            validTimeStart: 'ValidTimeStart',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            appMaxVersion: 'string',
            appMinVersion: 'string',
            bizType: 'string',
            checkOnline: 'boolean',
            extAttrStr: 'string',
            linkToken: 'string',
            osType: 'string',
            payload: 'string',
            thirdMsgId: 'string',
            validTimeEnd: 'number',
            validTimeStart: 'number',
            workspaceId: 'string',
        };
    }
}
exports.CreateOpenSingleDataRequest = CreateOpenSingleDataRequest;
class CreateOpenSingleDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.CreateOpenSingleDataResponse = CreateOpenSingleDataResponse;
class CreateOpenGlobalDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appMaxVersion: 'AppMaxVersion',
            appMinVersion: 'AppMinVersion',
            bizType: 'BizType',
            extAttrStr: 'ExtAttrStr',
            maxUid: 'MaxUid',
            minUid: 'MinUid',
            osType: 'OsType',
            payload: 'Payload',
            thirdMsgId: 'ThirdMsgId',
            uids: 'Uids',
            validTimeEnd: 'ValidTimeEnd',
            validTimeStart: 'ValidTimeStart',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            appMaxVersion: 'string',
            appMinVersion: 'string',
            bizType: 'string',
            extAttrStr: 'string',
            maxUid: 'number',
            minUid: 'number',
            osType: 'string',
            payload: 'string',
            thirdMsgId: 'string',
            uids: 'string',
            validTimeEnd: 'number',
            validTimeStart: 'number',
            workspaceId: 'string',
        };
    }
}
exports.CreateOpenGlobalDataRequest = CreateOpenGlobalDataRequest;
class CreateOpenGlobalDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.CreateOpenGlobalDataResponse = CreateOpenGlobalDataResponse;
class PushSimpleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            content: 'Content',
            deliveryType: 'DeliveryType',
            expiredSeconds: 'ExpiredSeconds',
            extendedParams: 'ExtendedParams',
            notifyType: 'NotifyType',
            pushAction: 'PushAction',
            silent: 'Silent',
            targetMsgkey: 'TargetMsgkey',
            taskName: 'TaskName',
            title: 'Title',
            uri: 'Uri',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            content: 'string',
            deliveryType: 'number',
            expiredSeconds: 'number',
            extendedParams: 'string',
            notifyType: 'string',
            pushAction: 'number',
            silent: 'number',
            targetMsgkey: 'string',
            taskName: 'string',
            title: 'string',
            uri: 'string',
            workspaceId: 'string',
        };
    }
}
exports.PushSimpleRequest = PushSimpleRequest;
class PushSimpleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.PushSimpleResponse = PushSimpleResponse;
class PushBroadcastRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            deliveryType: 'DeliveryType',
            expiredSeconds: 'ExpiredSeconds',
            extendedParams: 'ExtendedParams',
            msgkey: 'Msgkey',
            notifyType: 'NotifyType',
            pushAction: 'PushAction',
            pushStatus: 'PushStatus',
            silent: 'Silent',
            taskName: 'TaskName',
            templateKeyValue: 'TemplateKeyValue',
            templateName: 'TemplateName',
            unBindPeriod: 'UnBindPeriod',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            deliveryType: 'number',
            expiredSeconds: 'number',
            extendedParams: 'string',
            msgkey: 'string',
            notifyType: 'string',
            pushAction: 'number',
            pushStatus: 'number',
            silent: 'number',
            taskName: 'string',
            templateKeyValue: 'string',
            templateName: 'string',
            unBindPeriod: 'number',
            workspaceId: 'string',
        };
    }
}
exports.PushBroadcastRequest = PushBroadcastRequest;
class PushBroadcastResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.PushBroadcastResponse = PushBroadcastResponse;
class PushTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            deliveryType: 'DeliveryType',
            expiredSeconds: 'ExpiredSeconds',
            extendedParams: 'ExtendedParams',
            notifyType: 'NotifyType',
            pushAction: 'PushAction',
            silent: 'Silent',
            targetMsgkey: 'TargetMsgkey',
            taskName: 'TaskName',
            templateKeyValue: 'TemplateKeyValue',
            templateName: 'TemplateName',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            deliveryType: 'number',
            expiredSeconds: 'number',
            extendedParams: 'string',
            notifyType: 'string',
            pushAction: 'number',
            silent: 'number',
            targetMsgkey: 'string',
            taskName: 'string',
            templateKeyValue: 'string',
            templateName: 'string',
            workspaceId: 'string',
        };
    }
}
exports.PushTemplateRequest = PushTemplateRequest;
class PushTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.PushTemplateResponse = PushTemplateResponse;
class PushMultipleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            deliveryType: 'DeliveryType',
            expiredSeconds: 'ExpiredSeconds',
            extendedParams: 'ExtendedParams',
            notifyType: 'NotifyType',
            pushAction: 'PushAction',
            silent: 'Silent',
            targetMsg: 'TargetMsg',
            taskName: 'TaskName',
            templateName: 'TemplateName',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            deliveryType: 'number',
            expiredSeconds: 'number',
            extendedParams: 'string',
            notifyType: 'string',
            pushAction: 'number',
            silent: 'number',
            targetMsg: { 'type': 'array', 'itemType': PushMultipleRequestTargetMsg },
            taskName: 'string',
            templateName: 'string',
            workspaceId: 'string',
        };
    }
}
exports.PushMultipleRequest = PushMultipleRequest;
class PushMultipleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
        };
    }
}
exports.PushMultipleResponse = PushMultipleResponse;
class ListMcdpAimRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            emptyTag: 'EmptyTag',
            keyword: 'Keyword',
            name: 'Name',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            sort: 'Sort',
            sortField: 'SortField',
            tenantId: 'TenantId',
            type: 'Type',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            emptyTag: 'string',
            keyword: 'string',
            name: 'string',
            pageNo: 'number',
            pageSize: 'number',
            sort: 'string',
            sortField: 'string',
            tenantId: 'string',
            type: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMcdpAimRequest = ListMcdpAimRequest;
class ListMcdpAimResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: ListMcdpAimResponseResultContent,
        };
    }
}
exports.ListMcdpAimResponse = ListMcdpAimResponse;
class SaveMgsApirestRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            mpaasMappcenterMgsApirestSaveJsonStr: 'MpaasMappcenterMgsApirestSaveJsonStr',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            mpaasMappcenterMgsApirestSaveJsonStr: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SaveMgsApirestRequest = SaveMgsApirestRequest;
class SaveMgsApirestResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: SaveMgsApirestResponseResultContent,
        };
    }
}
exports.SaveMgsApirestResponse = SaveMgsApirestResponse;
class QueryMgsTestreqbodyautogenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            format: 'Format',
            mpaasMappcenterMgsTestreqbodyautogenQueryJsonStr: 'MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            format: 'string',
            mpaasMappcenterMgsTestreqbodyautogenQueryJsonStr: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMgsTestreqbodyautogenRequest = QueryMgsTestreqbodyautogenRequest;
class QueryMgsTestreqbodyautogenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: 'string',
        };
    }
}
exports.QueryMgsTestreqbodyautogenResponse = QueryMgsTestreqbodyautogenResponse;
class QueryMgsApirestRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            format: 'Format',
            id: 'Id',
            tenantId: 'TenantId',
            type: 'Type',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            appId: 'string',
            format: 'string',
            id: 'number',
            tenantId: 'string',
            type: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMgsApirestRequest = QueryMgsApirestRequest;
class QueryMgsApirestResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: QueryMgsApirestResponseResultContent,
        };
    }
}
exports.QueryMgsApirestResponse = QueryMgsApirestResponse;
class ListMgsApiRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiStatus: 'ApiStatus',
            apiType: 'ApiType',
            appId: 'AppId',
            format: 'Format',
            host: 'Host',
            needEncrypt: 'NeedEncrypt',
            needEtag: 'NeedEtag',
            needSign: 'NeedSign',
            operationType: 'OperationType',
            optFuzzy: 'OptFuzzy',
            pageIndex: 'PageIndex',
            pageSize: 'PageSize',
            sysId: 'SysId',
            sysName: 'SysName',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            apiStatus: 'string',
            apiType: 'string',
            appId: 'string',
            format: 'string',
            host: 'string',
            needEncrypt: 'string',
            needEtag: 'string',
            needSign: 'string',
            operationType: 'string',
            optFuzzy: 'string',
            pageIndex: 'number',
            pageSize: 'number',
            sysId: 'number',
            sysName: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMgsApiRequest = ListMgsApiRequest;
class ListMgsApiResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: ListMgsApiResponseResultContent,
        };
    }
}
exports.ListMgsApiResponse = ListMgsApiResponse;
class QueryMgsApipageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiStatus: 'ApiStatus',
            apiType: 'ApiType',
            appId: 'AppId',
            format: 'Format',
            host: 'Host',
            needEncrypt: 'NeedEncrypt',
            needEtag: 'NeedEtag',
            needSign: 'NeedSign',
            operationType: 'OperationType',
            optFuzzy: 'OptFuzzy',
            pageIndex: 'PageIndex',
            pageSize: 'PageSize',
            sysId: 'SysId',
            sysName: 'SysName',
            tenantId: 'TenantId',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            apiStatus: 'string',
            apiType: 'string',
            appId: 'string',
            format: 'string',
            host: 'string',
            needEncrypt: 'string',
            needEtag: 'string',
            needSign: 'string',
            operationType: 'string',
            optFuzzy: 'string',
            pageIndex: 'number',
            pageSize: 'number',
            sysId: 'number',
            sysName: 'string',
            tenantId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMgsApipageRequest = QueryMgsApipageRequest;
class QueryMgsApipageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            resultCode: 'ResultCode',
            resultMessage: 'ResultMessage',
            resultContent: 'ResultContent',
        };
    }
    static types() {
        return {
            requestId: 'string',
            resultCode: 'string',
            resultMessage: 'string',
            resultContent: QueryMgsApipageResponseResultContent,
        };
    }
}
exports.QueryMgsApipageResponse = QueryMgsApipageResponse;
class UpdateMpaasAppInfoResponseResultContentData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            code: 'Code',
            data: 'Data',
            message: 'Message',
            success: 'Success',
        };
    }
    static types() {
        return {
            appId: 'string',
            code: 'string',
            data: 'string',
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateMpaasAppInfoResponseResultContentData = UpdateMpaasAppInfoResponseResultContentData;
class UpdateMpaasAppInfoResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            data: 'Data',
        };
    }
    static types() {
        return {
            requestId: 'string',
            data: UpdateMpaasAppInfoResponseResultContentData,
        };
    }
}
exports.UpdateMpaasAppInfoResponseResultContent = UpdateMpaasAppInfoResponseResultContent;
class RunMsaDiffResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.RunMsaDiffResponseResultContent = RunMsaDiffResponseResultContent;
class CreateMsaEnhanceResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateMsaEnhanceResponseResultContent = CreateMsaEnhanceResponseResultContent;
class QueryMPaaSMasTinyAppDailyDataResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            msg: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyDataResponseResultContent = QueryMPaaSMasTinyAppDailyDataResponseResultContent;
class QueryMPaaSMasTinyAppHistoryDataResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            msg: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppHistoryDataResponseResultContent = QueryMPaaSMasTinyAppHistoryDataResponseResultContent;
class QueryMPaaSMasTinyAppDailyPageViewResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            msg: 'string',
        };
    }
}
exports.QueryMPaaSMasTinyAppDailyPageViewResponseResultContent = QueryMPaaSMasTinyAppDailyPageViewResponseResultContent;
class ListMPaaSMasTinyAppResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            msg: 'string',
        };
    }
}
exports.ListMPaaSMasTinyAppResponseResultContent = ListMPaaSMasTinyAppResponseResultContent;
class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certRSA: 'CertRSA',
            packageName: 'PackageName',
        };
    }
    static types() {
        return {
            certRSA: 'string',
            packageName: 'string',
        };
    }
}
exports.ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig = ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig;
class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'BundleId',
        };
    }
    static types() {
        return {
            bundleId: 'string',
        };
    }
}
exports.ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig = ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig;
class ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appDesc: 'AppDesc',
            appIcon: 'AppIcon',
            appId: 'AppId',
            appName: 'AppName',
            appSecret: 'AppSecret',
            creator: 'Creator',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            id: 'Id',
            modifier: 'Modifier',
            monitorJson: 'MonitorJson',
            status: 'Status',
            tenantId: 'TenantId',
            type: 'Type',
            androidConfig: 'AndroidConfig',
            iosConfig: 'IosConfig',
        };
    }
    static types() {
        return {
            appDesc: 'string',
            appIcon: 'string',
            appId: 'string',
            appName: 'string',
            appSecret: 'string',
            creator: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            modifier: 'string',
            monitorJson: 'string',
            status: 'number',
            tenantId: 'string',
            type: 'number',
            androidConfig: ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListAndroidConfig,
            iosConfig: ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppListIosConfig,
        };
    }
}
exports.ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList = ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList;
class ListMappCenterAppsResponseListMappCenterAppResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            mappCenterAppList: 'MappCenterAppList',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            mappCenterAppList: { 'type': 'array', 'itemType': ListMappCenterAppsResponseListMappCenterAppResultMappCenterAppList },
        };
    }
}
exports.ListMappCenterAppsResponseListMappCenterAppResult = ListMappCenterAppsResponseListMappCenterAppResult;
class ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            compatibleId: 'CompatibleId',
            createTime: 'CreateTime',
            displayName: 'DisplayName',
            id: 'Id',
            region: 'Region',
            status: 'Status',
            tenantId: 'TenantId',
            type: 'Type',
            uid: 'Uid',
            updateTime: 'UpdateTime',
            workspaceId: 'WorkspaceId',
            zones: 'Zones',
        };
    }
    static types() {
        return {
            compatibleId: 'string',
            createTime: 'string',
            displayName: 'string',
            id: 'string',
            region: 'string',
            status: 'string',
            tenantId: 'string',
            type: 'string',
            uid: 'number',
            updateTime: 'string',
            workspaceId: 'string',
            zones: 'string',
        };
    }
}
exports.ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList = ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList;
class ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            userId: 'UserId',
            mappCenterWorkspaceList: 'MappCenterWorkspaceList',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            userId: 'string',
            mappCenterWorkspaceList: { 'type': 'array', 'itemType': ListMappCenterWorkspacesResponseListMappCenterWorkspaceResultMappCenterWorkspaceList },
        };
    }
}
exports.ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult = ListMappCenterWorkspacesResponseListMappCenterWorkspaceResult;
class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certRSA: 'CertRSA',
            packageName: 'PackageName',
        };
    }
    static types() {
        return {
            certRSA: 'string',
            packageName: 'string',
        };
    }
}
exports.QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig = QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig;
class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bundleId: 'BundleId',
        };
    }
    static types() {
        return {
            bundleId: 'string',
        };
    }
}
exports.QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig = QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig;
class QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appDesc: 'AppDesc',
            appIcon: 'AppIcon',
            appId: 'AppId',
            appName: 'AppName',
            appSecret: 'AppSecret',
            creator: 'Creator',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            id: 'Id',
            modifier: 'Modifier',
            monitorJson: 'MonitorJson',
            status: 'Status',
            tenantId: 'TenantId',
            type: 'Type',
            androidConfig: 'AndroidConfig',
            iosConfig: 'IosConfig',
        };
    }
    static types() {
        return {
            appDesc: 'string',
            appIcon: 'string',
            appId: 'string',
            appName: 'string',
            appSecret: 'string',
            creator: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            modifier: 'string',
            monitorJson: 'string',
            status: 'number',
            tenantId: 'string',
            type: 'number',
            androidConfig: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppAndroidConfig,
            iosConfig: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterAppIosConfig,
        };
    }
}
exports.QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp = QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp;
class QueryMappCenterAppResponseQueryMappCenterAppResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            mappCenterApp: 'MappCenterApp',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            mappCenterApp: QueryMappCenterAppResponseQueryMappCenterAppResultMappCenterApp,
        };
    }
}
exports.QueryMappCenterAppResponseQueryMappCenterAppResult = QueryMappCenterAppResponseQueryMappCenterAppResult;
class ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configDownloadUrl: 'ConfigDownloadUrl',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            configDownloadUrl: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult = ExportMappCenterAppConfigResponseExportMappCenterAppConfigResult;
class DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizRequestId: 'BizRequestId',
            filePath: 'FilePath',
            fileType: 'FileType',
            recordStartTime: 'RecordStartTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            bizRequestId: 'string',
            filePath: 'string',
            fileType: 'string',
            recordStartTime: 'string',
            status: 'string',
        };
    }
}
exports.DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData = DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData;
class DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            msg: 'Msg',
            data: 'Data',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            data: DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData,
        };
    }
}
exports.DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp = DeleteMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp;
class QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizRequestId: 'BizRequestId',
            filePath: 'FilePath',
            fileType: 'FileType',
            recordStartTime: 'RecordStartTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            bizRequestId: 'string',
            filePath: 'string',
            fileType: 'string',
            recordStartTime: 'string',
            status: 'string',
        };
    }
}
exports.QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData = QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData;
class QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            msg: 'Msg',
            data: 'Data',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            data: QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapRespData,
        };
    }
}
exports.QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp = QueryMpaasMrtcArtvcRecordfileResponseMrtcApiRecordFileQueryWrapResp;
class ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            greyConfigInfo: 'GreyConfigInfo',
            greyEndtime: 'GreyEndtime',
            greyEndtimeData: 'GreyEndtimeData',
            greyNum: 'GreyNum',
            id: 'Id',
            memo: 'Memo',
            packageId: 'PackageId',
            platform: 'Platform',
            productVersion: 'ProductVersion',
            publishMode: 'PublishMode',
            publishType: 'PublishType',
            status: 'Status',
            taskStatus: 'TaskStatus',
            whitelistIds: 'WhitelistIds',
        };
    }
    static types() {
        return {
            appCode: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            greyConfigInfo: 'string',
            greyEndtime: 'string',
            greyEndtimeData: 'string',
            greyNum: 'number',
            id: 'number',
            memo: 'string',
            packageId: 'number',
            platform: 'string',
            productVersion: 'string',
            publishMode: 'number',
            publishType: 'number',
            status: 'string',
            taskStatus: 'number',
            whitelistIds: 'string',
        };
    }
}
exports.ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList = ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList;
class ListMcubeMiniTasksResponseListMiniTaskResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            miniTaskList: 'MiniTaskList',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            miniTaskList: { 'type': 'array', 'itemType': ListMcubeMiniTasksResponseListMiniTaskResultMiniTaskList },
        };
    }
}
exports.ListMcubeMiniTasksResponseListMiniTaskResult = ListMcubeMiniTasksResponseListMiniTaskResult;
class ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            autoInstall: 'AutoInstall',
            clientVersionMax: 'ClientVersionMax',
            clientVersionMin: 'ClientVersionMin',
            downloadUrl: 'DownloadUrl',
            extendInfo: 'ExtendInfo',
            extraData: 'ExtraData',
            fallbackBaseUrl: 'FallbackBaseUrl',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            h5Id: 'H5Id',
            h5Name: 'H5Name',
            h5Version: 'H5Version',
            id: 'Id',
            installType: 'InstallType',
            mainUrl: 'MainUrl',
            memo: 'Memo',
            packageType: 'PackageType',
            platform: 'Platform',
            publishPeriod: 'PublishPeriod',
            resourceType: 'ResourceType',
            status: 'Status',
        };
    }
    static types() {
        return {
            appCode: 'string',
            autoInstall: 'number',
            clientVersionMax: 'string',
            clientVersionMin: 'string',
            downloadUrl: 'string',
            extendInfo: 'string',
            extraData: 'string',
            fallbackBaseUrl: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            h5Id: 'string',
            h5Name: 'string',
            h5Version: 'string',
            id: 'number',
            installType: 'number',
            mainUrl: 'string',
            memo: 'string',
            packageType: 'number',
            platform: 'string',
            publishPeriod: 'number',
            resourceType: 'number',
            status: 'number',
        };
    }
}
exports.ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList = ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList;
class ListMcubeMiniPackagesResponseListMiniPackageResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            miniPackageList: 'MiniPackageList',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            miniPackageList: { 'type': 'array', 'itemType': ListMcubeMiniPackagesResponseListMiniPackageResultMiniPackageList },
        };
    }
}
exports.ListMcubeMiniPackagesResponseListMiniPackageResult = ListMcubeMiniPackagesResponseListMiniPackageResult;
class GetMcubeFileTokenResponseGetFileTokenResultFileToken extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessid: 'Accessid',
            dir: 'Dir',
            expire: 'Expire',
            host: 'Host',
            policy: 'Policy',
            signature: 'Signature',
        };
    }
    static types() {
        return {
            accessid: 'string',
            dir: 'string',
            expire: 'string',
            host: 'string',
            policy: 'string',
            signature: 'string',
        };
    }
}
exports.GetMcubeFileTokenResponseGetFileTokenResultFileToken = GetMcubeFileTokenResponseGetFileTokenResultFileToken;
class GetMcubeFileTokenResponseGetFileTokenResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            fileToken: 'FileToken',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            fileToken: GetMcubeFileTokenResponseGetFileTokenResultFileToken,
        };
    }
}
exports.GetMcubeFileTokenResponseGetFileTokenResult = GetMcubeFileTokenResponseGetFileTokenResult;
class UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failNum: 'FailNum',
            failUserIds: 'FailUserIds',
            successNum: 'SuccessNum',
        };
    }
    static types() {
        return {
            failNum: 'number',
            failUserIds: 'string',
            successNum: 'number',
        };
    }
}
exports.UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo = UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo;
class UpdateMcubeWhitelistResponseAddWhitelistResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            addWhitelistInfo: 'AddWhitelistInfo',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            addWhitelistInfo: UpdateMcubeWhitelistResponseAddWhitelistResultAddWhitelistInfo,
        };
    }
}
exports.UpdateMcubeWhitelistResponseAddWhitelistResult = UpdateMcubeWhitelistResponseAddWhitelistResult;
class DeleteMcubeWhitelistResponseDeleteWhitelistResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteMcubeWhitelistResponseDeleteWhitelistResult = DeleteMcubeWhitelistResponseDeleteWhitelistResult;
class CreateMcubeMiniTaskResponseCreateMiniTaskResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniTaskId: 'MiniTaskId',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            miniTaskId: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateMcubeMiniTaskResponseCreateMiniTaskResult = CreateMcubeMiniTaskResponseCreateMiniTaskResult;
class ExistMcubeRsaKeyResponseCheckRsaKeyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.ExistMcubeRsaKeyResponseCheckRsaKeyResult = ExistMcubeRsaKeyResponseCheckRsaKeyResult;
class UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            debugUrl: 'DebugUrl',
            packageId: 'PackageId',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            debugUrl: 'string',
            packageId: 'string',
            userId: 'string',
        };
    }
}
exports.UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult = UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult;
class UploadMcubeMiniPackageResponseUploadMiniPackageResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            returnPackageResult: 'ReturnPackageResult',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            returnPackageResult: UploadMcubeMiniPackageResponseUploadMiniPackageResultReturnPackageResult,
        };
    }
}
exports.UploadMcubeMiniPackageResponseUploadMiniPackageResult = UploadMcubeMiniPackageResponseUploadMiniPackageResult;
class QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            greyConfigInfo: 'GreyConfigInfo',
            greyEndtime: 'GreyEndtime',
            greyEndtimeData: 'GreyEndtimeData',
            greyNum: 'GreyNum',
            id: 'Id',
            memo: 'Memo',
            packageId: 'PackageId',
            platform: 'Platform',
            productVersion: 'ProductVersion',
            publishMode: 'PublishMode',
            publishType: 'PublishType',
            status: 'Status',
            taskStatus: 'TaskStatus',
            whitelistIds: 'WhitelistIds',
        };
    }
    static types() {
        return {
            appCode: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            greyConfigInfo: 'string',
            greyEndtime: 'string',
            greyEndtimeData: 'string',
            greyNum: 'number',
            id: 'number',
            memo: 'string',
            packageId: 'number',
            platform: 'string',
            productVersion: 'string',
            publishMode: 'number',
            publishType: 'number',
            status: 'string',
            taskStatus: 'number',
            whitelistIds: 'string',
        };
    }
}
exports.QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo = QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo;
class QueryMcubeMiniTaskResponseQueryMiniTaskResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            miniTaskInfo: 'MiniTaskInfo',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            miniTaskInfo: QueryMcubeMiniTaskResponseQueryMiniTaskResultMiniTaskInfo,
        };
    }
}
exports.QueryMcubeMiniTaskResponseQueryMiniTaskResult = QueryMcubeMiniTaskResponseQueryMiniTaskResult;
class QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            autoInstall: 'AutoInstall',
            clientVersionMax: 'ClientVersionMax',
            clientVersionMin: 'ClientVersionMin',
            downloadUrl: 'DownloadUrl',
            extendInfo: 'ExtendInfo',
            extraData: 'ExtraData',
            fallbackBaseUrl: 'FallbackBaseUrl',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            h5Id: 'H5Id',
            h5Name: 'H5Name',
            h5Version: 'H5Version',
            id: 'Id',
            installType: 'InstallType',
            mainUrl: 'MainUrl',
            memo: 'Memo',
            packageType: 'PackageType',
            platform: 'Platform',
            publishPeriod: 'PublishPeriod',
            resourceType: 'ResourceType',
            status: 'Status',
        };
    }
    static types() {
        return {
            appCode: 'string',
            autoInstall: 'number',
            clientVersionMax: 'string',
            clientVersionMin: 'string',
            downloadUrl: 'string',
            extendInfo: 'string',
            extraData: 'string',
            fallbackBaseUrl: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            h5Id: 'string',
            h5Name: 'string',
            h5Version: 'string',
            id: 'number',
            installType: 'number',
            mainUrl: 'string',
            memo: 'string',
            packageType: 'number',
            platform: 'string',
            publishPeriod: 'number',
            resourceType: 'number',
            status: 'number',
        };
    }
}
exports.QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo = QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo;
class QueryMcubeMiniPackageResponseQueryMiniPackageResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            miniPackageInfo: 'MiniPackageInfo',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            miniPackageInfo: QueryMcubeMiniPackageResponseQueryMiniPackageResultMiniPackageInfo,
        };
    }
}
exports.QueryMcubeMiniPackageResponseQueryMiniPackageResult = QueryMcubeMiniPackageResponseQueryMiniPackageResult;
class UploadMcubeRsaKeyResponseUploadRsaResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.UploadMcubeRsaKeyResponseUploadRsaResult = UploadMcubeRsaKeyResponseUploadRsaResult;
class DeleteMcubeMiniAppResponseDeleteMiniResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteMcubeMiniAppResponseDeleteMiniResult = DeleteMcubeMiniAppResponseDeleteMiniResult;
class CreateMcubeWhitelistResponseCreateWhitelistResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            whitelistId: 'WhitelistId',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            whitelistId: 'string',
        };
    }
}
exports.CreateMcubeWhitelistResponseCreateWhitelistResult = CreateMcubeWhitelistResponseCreateWhitelistResult;
class CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            whitelistId: 'WhitelistId',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            whitelistId: 'string',
        };
    }
}
exports.CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult = CreateMcubeWhitelistForIdeResponseCreateWhitelistForIdeResult;
class ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult = ChangeMcubeMiniTaskStatusResponseChangeMiniTaskStatusResult;
class CreateMcubeVhostResponseCreateVhostResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateMcubeVhostResponseCreateVhostResult = CreateMcubeVhostResponseCreateVhostResult;
class CreateMcubeMiniAppResponseCreateMiniResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateMcubeMiniAppResponseCreateMiniResult = CreateMcubeMiniAppResponseCreateMiniResult;
class QueryMcubeVhostResponseQueryVhostResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            resultMsg: 'ResultMsg',
            success: 'Success',
        };
    }
    static types() {
        return {
            data: 'string',
            resultMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryMcubeVhostResponseQueryVhostResult = QueryMcubeVhostResponseQueryVhostResult;
class ListMcubeMiniAppsResponseListMiniResultMiniProgramList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            h5Id: 'H5Id',
            h5Name: 'H5Name',
        };
    }
    static types() {
        return {
            appCode: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            h5Id: 'string',
            h5Name: 'string',
        };
    }
}
exports.ListMcubeMiniAppsResponseListMiniResultMiniProgramList = ListMcubeMiniAppsResponseListMiniResultMiniProgramList;
class ListMcubeMiniAppsResponseListMiniResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            miniProgramList: 'MiniProgramList',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            miniProgramList: { 'type': 'array', 'itemType': ListMcubeMiniAppsResponseListMiniResultMiniProgramList },
        };
    }
}
exports.ListMcubeMiniAppsResponseListMiniResult = ListMcubeMiniAppsResponseListMiniResult;
class ListMcubeWhitelistsResponseListWhitelistResultWhitelists extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'AppCode',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            id: 'Id',
            whitelistType: 'WhitelistType',
            whiteListCount: 'WhiteListCount',
            whiteListName: 'WhiteListName',
        };
    }
    static types() {
        return {
            appCode: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            whitelistType: 'string',
            whiteListCount: 'number',
            whiteListName: 'string',
        };
    }
}
exports.ListMcubeWhitelistsResponseListWhitelistResultWhitelists = ListMcubeWhitelistsResponseListWhitelistResultWhitelists;
class ListMcubeWhitelistsResponseListWhitelistResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultMsg: 'ResultMsg',
            success: 'Success',
            whitelists: 'Whitelists',
        };
    }
    static types() {
        return {
            resultMsg: 'string',
            success: 'boolean',
            whitelists: { 'type': 'array', 'itemType': ListMcubeWhitelistsResponseListWhitelistResultWhitelists },
        };
    }
}
exports.ListMcubeWhitelistsResponseListWhitelistResult = ListMcubeWhitelistsResponseListWhitelistResult;
class PushMultipleRequestTargetMsg extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extendedParams: 'ExtendedParams',
            msgKey: 'MsgKey',
            target: 'Target',
            templateKeyValue: 'TemplateKeyValue',
        };
    }
    static types() {
        return {
            extendedParams: 'string',
            msgKey: 'string',
            target: 'string',
            templateKeyValue: 'string',
        };
    }
}
exports.PushMultipleRequestTargetMsg = PushMultipleRequestTargetMsg;
class ListMcdpAimResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.ListMcdpAimResponseResultContent = ListMcdpAimResponseResultContent;
class SaveMgsApirestResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorMessage: 'ErrorMessage',
            success: 'Success',
            value: 'Value',
        };
    }
    static types() {
        return {
            errorMessage: 'string',
            success: 'boolean',
            value: 'boolean',
        };
    }
}
exports.SaveMgsApirestResponseResultContent = SaveMgsApirestResponseResultContent;
class QueryMgsApirestResponseResultContentValueHeaderRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueHeaderRule = QueryMgsApirestResponseResultContentValueHeaderRule;
class QueryMgsApirestResponseResultContentValueHeaderRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueHeaderRules = QueryMgsApirestResponseResultContentValueHeaderRules;
class QueryMgsApirestResponseResultContentValueRequestParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiId: 'ApiId',
            appId: 'AppId',
            defaultValue: 'DefaultValue',
            description: 'Description',
            id: 'Id',
            location: 'Location',
            name: 'Name',
            refType: 'RefType',
            type: 'Type',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            apiId: 'string',
            appId: 'string',
            defaultValue: 'string',
            description: 'string',
            id: 'number',
            location: 'string',
            name: 'string',
            refType: 'string',
            type: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueRequestParams = QueryMgsApirestResponseResultContentValueRequestParams;
class QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            charset: 'Charset',
            contentType: 'ContentType',
            host: 'Host',
            method: 'Method',
            path: 'Path',
        };
    }
    static types() {
        return {
            charset: 'string',
            contentType: 'string',
            host: 'string',
            method: 'string',
            path: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker = QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker;
class QueryMgsApirestResponseResultContentValueApiInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rpcInvoker: 'RpcInvoker',
            httpInvoker: 'HttpInvoker',
        };
    }
    static types() {
        return {
            rpcInvoker: 'string',
            httpInvoker: QueryMgsApirestResponseResultContentValueApiInvokerHttpInvoker,
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueApiInvoker = QueryMgsApirestResponseResultContentValueApiInvoker;
class QueryMgsApirestResponseResultContentValueCacheRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cacheKey: 'CacheKey',
            needCache: 'NeedCache',
            ttl: 'Ttl',
        };
    }
    static types() {
        return {
            cacheKey: 'string',
            needCache: 'boolean',
            ttl: 'number',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueCacheRule = QueryMgsApirestResponseResultContentValueCacheRule;
class QueryMgsApirestResponseResultContentValueLimitRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultResponse: 'DefaultResponse',
            i18nResponse: 'I18nResponse',
            interval: 'Interval',
            limit: 'Limit',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            defaultResponse: 'string',
            i18nResponse: 'string',
            interval: 'number',
            limit: 'number',
            mode: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueLimitRule = QueryMgsApirestResponseResultContentValueLimitRule;
class QueryMgsApirestResponseResultContentValueMigrateRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            flowPercent: 'FlowPercent',
            needMigrate: 'NeedMigrate',
            needSwitchCompletely: 'NeedSwitchCompletely',
            sysId: 'SysId',
            sysName: 'SysName',
            upstreamType: 'UpstreamType',
        };
    }
    static types() {
        return {
            flowPercent: 'number',
            needMigrate: 'boolean',
            needSwitchCompletely: 'boolean',
            sysId: 'number',
            sysName: 'string',
            upstreamType: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueMigrateRule = QueryMgsApirestResponseResultContentValueMigrateRule;
class QueryMgsApirestResponseResultContentValueMockRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mockData: 'MockData',
            needMock: 'NeedMock',
            percentage: 'Percentage',
            type: 'Type',
        };
    }
    static types() {
        return {
            mockData: 'string',
            needMock: 'boolean',
            percentage: 'number',
            type: 'string',
        };
    }
}
exports.QueryMgsApirestResponseResultContentValueMockRule = QueryMgsApirestResponseResultContentValueMockRule;
class QueryMgsApirestResponseResultContentValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiName: 'ApiName',
            apiStatus: 'ApiStatus',
            apiType: 'ApiType',
            appId: 'AppId',
            authRuleName: 'AuthRuleName',
            charset: 'Charset',
            contentType: 'ContentType',
            description: 'Description',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            host: 'Host',
            id: 'Id',
            interfaceType: 'InterfaceType',
            method: 'Method',
            methodName: 'MethodName',
            needEncrypt: 'NeedEncrypt',
            needETag: 'NeedETag',
            needJsonp: 'NeedJsonp',
            needSign: 'NeedSign',
            operationType: 'OperationType',
            paramGetMethod: 'ParamGetMethod',
            path: 'Path',
            requestBodyModel: 'RequestBodyModel',
            responseBodyModel: 'ResponseBodyModel',
            sysId: 'SysId',
            sysName: 'SysName',
            timeout: 'Timeout',
            workspaceId: 'WorkspaceId',
            headerRule: 'HeaderRule',
            headerRules: 'HeaderRules',
            requestParams: 'RequestParams',
            apiInvoker: 'ApiInvoker',
            cacheRule: 'CacheRule',
            limitRule: 'LimitRule',
            migrateRule: 'MigrateRule',
            mockRule: 'MockRule',
        };
    }
    static types() {
        return {
            apiName: 'string',
            apiStatus: 'string',
            apiType: 'string',
            appId: 'string',
            authRuleName: 'string',
            charset: 'string',
            contentType: 'string',
            description: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            host: 'string',
            id: 'number',
            interfaceType: 'string',
            method: 'string',
            methodName: 'string',
            needEncrypt: 'string',
            needETag: 'string',
            needJsonp: 'string',
            needSign: 'string',
            operationType: 'string',
            paramGetMethod: 'string',
            path: 'string',
            requestBodyModel: 'string',
            responseBodyModel: 'string',
            sysId: 'number',
            sysName: 'string',
            timeout: 'string',
            workspaceId: 'string',
            headerRule: { 'type': 'array', 'itemType': QueryMgsApirestResponseResultContentValueHeaderRule },
            headerRules: { 'type': 'array', 'itemType': QueryMgsApirestResponseResultContentValueHeaderRules },
            requestParams: { 'type': 'array', 'itemType': QueryMgsApirestResponseResultContentValueRequestParams },
            apiInvoker: QueryMgsApirestResponseResultContentValueApiInvoker,
            cacheRule: QueryMgsApirestResponseResultContentValueCacheRule,
            limitRule: QueryMgsApirestResponseResultContentValueLimitRule,
            migrateRule: QueryMgsApirestResponseResultContentValueMigrateRule,
            mockRule: QueryMgsApirestResponseResultContentValueMockRule,
        };
    }
}
exports.QueryMgsApirestResponseResultContentValue = QueryMgsApirestResponseResultContentValue;
class QueryMgsApirestResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorMessage: 'ErrorMessage',
            success: 'Success',
            value: 'Value',
        };
    }
    static types() {
        return {
            errorMessage: 'string',
            success: 'boolean',
            value: QueryMgsApirestResponseResultContentValue,
        };
    }
}
exports.QueryMgsApirestResponseResultContent = QueryMgsApirestResponseResultContent;
class ListMgsApiResponseResultContentValueHeaderRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueHeaderRule = ListMgsApiResponseResultContentValueHeaderRule;
class ListMgsApiResponseResultContentValueHeaderRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueHeaderRules = ListMgsApiResponseResultContentValueHeaderRules;
class ListMgsApiResponseResultContentValueRequestParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiId: 'ApiId',
            appId: 'AppId',
            defaultValue: 'DefaultValue',
            description: 'Description',
            id: 'Id',
            location: 'Location',
            name: 'Name',
            refType: 'RefType',
            type: 'Type',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            apiId: 'string',
            appId: 'string',
            defaultValue: 'string',
            description: 'string',
            id: 'number',
            location: 'string',
            name: 'string',
            refType: 'string',
            type: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueRequestParams = ListMgsApiResponseResultContentValueRequestParams;
class ListMgsApiResponseResultContentValueApiInvokerHttpInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            charset: 'Charset',
            contentType: 'ContentType',
            host: 'Host',
            method: 'Method',
            path: 'Path',
        };
    }
    static types() {
        return {
            charset: 'string',
            contentType: 'string',
            host: 'string',
            method: 'string',
            path: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueApiInvokerHttpInvoker = ListMgsApiResponseResultContentValueApiInvokerHttpInvoker;
class ListMgsApiResponseResultContentValueApiInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rpcInvoker: 'RpcInvoker',
            httpInvoker: 'HttpInvoker',
        };
    }
    static types() {
        return {
            rpcInvoker: 'string',
            httpInvoker: ListMgsApiResponseResultContentValueApiInvokerHttpInvoker,
        };
    }
}
exports.ListMgsApiResponseResultContentValueApiInvoker = ListMgsApiResponseResultContentValueApiInvoker;
class ListMgsApiResponseResultContentValueCacheRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cacheKey: 'CacheKey',
            needCache: 'NeedCache',
            ttl: 'Ttl',
        };
    }
    static types() {
        return {
            cacheKey: 'string',
            needCache: 'boolean',
            ttl: 'number',
        };
    }
}
exports.ListMgsApiResponseResultContentValueCacheRule = ListMgsApiResponseResultContentValueCacheRule;
class ListMgsApiResponseResultContentValueLimitRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultResponse: 'DefaultResponse',
            i18nResponse: 'I18nResponse',
            interval: 'Interval',
            limit: 'Limit',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            defaultResponse: 'string',
            i18nResponse: 'string',
            interval: 'number',
            limit: 'number',
            mode: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueLimitRule = ListMgsApiResponseResultContentValueLimitRule;
class ListMgsApiResponseResultContentValueMigrateRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            flowPercent: 'FlowPercent',
            needMigrate: 'NeedMigrate',
            needSwitchCompletely: 'NeedSwitchCompletely',
            sysId: 'SysId',
            sysName: 'SysName',
            upstreamType: 'UpstreamType',
        };
    }
    static types() {
        return {
            flowPercent: 'number',
            needMigrate: 'boolean',
            needSwitchCompletely: 'boolean',
            sysId: 'number',
            sysName: 'string',
            upstreamType: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueMigrateRule = ListMgsApiResponseResultContentValueMigrateRule;
class ListMgsApiResponseResultContentValueMockRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mockData: 'MockData',
            needMock: 'NeedMock',
            percentage: 'Percentage',
            type: 'Type',
        };
    }
    static types() {
        return {
            mockData: 'string',
            needMock: 'boolean',
            percentage: 'number',
            type: 'string',
        };
    }
}
exports.ListMgsApiResponseResultContentValueMockRule = ListMgsApiResponseResultContentValueMockRule;
class ListMgsApiResponseResultContentValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiName: 'ApiName',
            apiStatus: 'ApiStatus',
            apiType: 'ApiType',
            appId: 'AppId',
            authRuleName: 'AuthRuleName',
            charset: 'Charset',
            contentType: 'ContentType',
            description: 'Description',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            host: 'Host',
            id: 'Id',
            interfaceType: 'InterfaceType',
            method: 'Method',
            methodName: 'MethodName',
            needEncrypt: 'NeedEncrypt',
            needETag: 'NeedETag',
            needJsonp: 'NeedJsonp',
            needSign: 'NeedSign',
            operationType: 'OperationType',
            paramGetMethod: 'ParamGetMethod',
            path: 'Path',
            requestBodyModel: 'RequestBodyModel',
            responseBodyModel: 'ResponseBodyModel',
            sysId: 'SysId',
            sysName: 'SysName',
            timeout: 'Timeout',
            workspaceId: 'WorkspaceId',
            headerRule: 'HeaderRule',
            headerRules: 'HeaderRules',
            requestParams: 'RequestParams',
            apiInvoker: 'ApiInvoker',
            cacheRule: 'CacheRule',
            limitRule: 'LimitRule',
            migrateRule: 'MigrateRule',
            mockRule: 'MockRule',
        };
    }
    static types() {
        return {
            apiName: 'string',
            apiStatus: 'string',
            apiType: 'string',
            appId: 'string',
            authRuleName: 'string',
            charset: 'string',
            contentType: 'string',
            description: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            host: 'string',
            id: 'number',
            interfaceType: 'string',
            method: 'string',
            methodName: 'string',
            needEncrypt: 'string',
            needETag: 'string',
            needJsonp: 'string',
            needSign: 'string',
            operationType: 'string',
            paramGetMethod: 'string',
            path: 'string',
            requestBodyModel: 'string',
            responseBodyModel: 'string',
            sysId: 'number',
            sysName: 'string',
            timeout: 'string',
            workspaceId: 'string',
            headerRule: { 'type': 'array', 'itemType': ListMgsApiResponseResultContentValueHeaderRule },
            headerRules: { 'type': 'array', 'itemType': ListMgsApiResponseResultContentValueHeaderRules },
            requestParams: { 'type': 'array', 'itemType': ListMgsApiResponseResultContentValueRequestParams },
            apiInvoker: ListMgsApiResponseResultContentValueApiInvoker,
            cacheRule: ListMgsApiResponseResultContentValueCacheRule,
            limitRule: ListMgsApiResponseResultContentValueLimitRule,
            migrateRule: ListMgsApiResponseResultContentValueMigrateRule,
            mockRule: ListMgsApiResponseResultContentValueMockRule,
        };
    }
}
exports.ListMgsApiResponseResultContentValue = ListMgsApiResponseResultContentValue;
class ListMgsApiResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorMessage: 'ErrorMessage',
            success: 'Success',
            value: 'Value',
        };
    }
    static types() {
        return {
            errorMessage: 'string',
            success: 'boolean',
            value: { 'type': 'array', 'itemType': ListMgsApiResponseResultContentValue },
        };
    }
}
exports.ListMgsApiResponseResultContent = ListMgsApiResponseResultContent;
class QueryMgsApipageResponseResultContentListHeaderRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListHeaderRule = QueryMgsApipageResponseResultContentListHeaderRule;
class QueryMgsApipageResponseResultContentListHeaderRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerKey: 'HeaderKey',
            location: 'Location',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            headerKey: 'string',
            location: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListHeaderRules = QueryMgsApipageResponseResultContentListHeaderRules;
class QueryMgsApipageResponseResultContentListRequestParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiId: 'ApiId',
            appId: 'AppId',
            defaultValue: 'DefaultValue',
            description: 'Description',
            id: 'Id',
            location: 'Location',
            name: 'Name',
            refType: 'RefType',
            type: 'Type',
            workspaceId: 'WorkspaceId',
        };
    }
    static types() {
        return {
            apiId: 'string',
            appId: 'string',
            defaultValue: 'string',
            description: 'string',
            id: 'number',
            location: 'string',
            name: 'string',
            refType: 'string',
            type: 'string',
            workspaceId: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListRequestParams = QueryMgsApipageResponseResultContentListRequestParams;
class QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            charset: 'Charset',
            contentType: 'ContentType',
            host: 'Host',
            method: 'Method',
            path: 'Path',
        };
    }
    static types() {
        return {
            charset: 'string',
            contentType: 'string',
            host: 'string',
            method: 'string',
            path: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker = QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker;
class QueryMgsApipageResponseResultContentListApiInvoker extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rpcInvoker: 'RpcInvoker',
            httpInvoker: 'HttpInvoker',
        };
    }
    static types() {
        return {
            rpcInvoker: 'string',
            httpInvoker: QueryMgsApipageResponseResultContentListApiInvokerHttpInvoker,
        };
    }
}
exports.QueryMgsApipageResponseResultContentListApiInvoker = QueryMgsApipageResponseResultContentListApiInvoker;
class QueryMgsApipageResponseResultContentListCacheRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cacheKey: 'CacheKey',
            needCache: 'NeedCache',
            ttl: 'Ttl',
        };
    }
    static types() {
        return {
            cacheKey: 'string',
            needCache: 'boolean',
            ttl: 'number',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListCacheRule = QueryMgsApipageResponseResultContentListCacheRule;
class QueryMgsApipageResponseResultContentListLimitRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultResponse: 'DefaultResponse',
            i18nResponse: 'I18nResponse',
            interval: 'Interval',
            limit: 'Limit',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            defaultResponse: 'string',
            i18nResponse: 'string',
            interval: 'number',
            limit: 'number',
            mode: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListLimitRule = QueryMgsApipageResponseResultContentListLimitRule;
class QueryMgsApipageResponseResultContentListMigrateRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            flowPercent: 'FlowPercent',
            needMigrate: 'NeedMigrate',
            needSwitchCompletely: 'NeedSwitchCompletely',
            sysId: 'SysId',
            sysName: 'SysName',
            upstreamType: 'UpstreamType',
        };
    }
    static types() {
        return {
            flowPercent: 'number',
            needMigrate: 'boolean',
            needSwitchCompletely: 'boolean',
            sysId: 'number',
            sysName: 'string',
            upstreamType: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListMigrateRule = QueryMgsApipageResponseResultContentListMigrateRule;
class QueryMgsApipageResponseResultContentListMockRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mockData: 'MockData',
            needMock: 'NeedMock',
            percentage: 'Percentage',
            type: 'Type',
        };
    }
    static types() {
        return {
            mockData: 'string',
            needMock: 'boolean',
            percentage: 'number',
            type: 'string',
        };
    }
}
exports.QueryMgsApipageResponseResultContentListMockRule = QueryMgsApipageResponseResultContentListMockRule;
class QueryMgsApipageResponseResultContentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiName: 'ApiName',
            apiStatus: 'ApiStatus',
            apiType: 'ApiType',
            appId: 'AppId',
            authRuleName: 'AuthRuleName',
            charset: 'Charset',
            contentType: 'ContentType',
            description: 'Description',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            host: 'Host',
            id: 'Id',
            interfaceType: 'InterfaceType',
            method: 'Method',
            methodName: 'MethodName',
            needEncrypt: 'NeedEncrypt',
            needETag: 'NeedETag',
            needJsonp: 'NeedJsonp',
            needSign: 'NeedSign',
            operationType: 'OperationType',
            paramGetMethod: 'ParamGetMethod',
            path: 'Path',
            requestBodyModel: 'RequestBodyModel',
            responseBodyModel: 'ResponseBodyModel',
            sysId: 'SysId',
            sysName: 'SysName',
            timeout: 'Timeout',
            workspaceId: 'WorkspaceId',
            headerRule: 'HeaderRule',
            headerRules: 'HeaderRules',
            requestParams: 'RequestParams',
            apiInvoker: 'ApiInvoker',
            cacheRule: 'CacheRule',
            limitRule: 'LimitRule',
            migrateRule: 'MigrateRule',
            mockRule: 'MockRule',
        };
    }
    static types() {
        return {
            apiName: 'string',
            apiStatus: 'string',
            apiType: 'string',
            appId: 'string',
            authRuleName: 'string',
            charset: 'string',
            contentType: 'string',
            description: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            host: 'string',
            id: 'number',
            interfaceType: 'string',
            method: 'string',
            methodName: 'string',
            needEncrypt: 'string',
            needETag: 'string',
            needJsonp: 'string',
            needSign: 'string',
            operationType: 'string',
            paramGetMethod: 'string',
            path: 'string',
            requestBodyModel: 'string',
            responseBodyModel: 'string',
            sysId: 'number',
            sysName: 'string',
            timeout: 'string',
            workspaceId: 'string',
            headerRule: { 'type': 'array', 'itemType': QueryMgsApipageResponseResultContentListHeaderRule },
            headerRules: { 'type': 'array', 'itemType': QueryMgsApipageResponseResultContentListHeaderRules },
            requestParams: { 'type': 'array', 'itemType': QueryMgsApipageResponseResultContentListRequestParams },
            apiInvoker: QueryMgsApipageResponseResultContentListApiInvoker,
            cacheRule: QueryMgsApipageResponseResultContentListCacheRule,
            limitRule: QueryMgsApipageResponseResultContentListLimitRule,
            migrateRule: QueryMgsApipageResponseResultContentListMigrateRule,
            mockRule: QueryMgsApipageResponseResultContentListMockRule,
        };
    }
}
exports.QueryMgsApipageResponseResultContentList = QueryMgsApipageResponseResultContentList;
class QueryMgsApipageResponseResultContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            current: 'Current',
            pageSize: 'PageSize',
            total: 'Total',
            list: 'List',
        };
    }
    static types() {
        return {
            current: 'number',
            pageSize: 'number',
            total: 'number',
            list: { 'type': 'array', 'itemType': QueryMgsApipageResponseResultContentList },
        };
    }
}
exports.QueryMgsApipageResponseResultContent = QueryMgsApipageResponseResultContent;
class Client extends rpc_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = {
            'cn-hangzhou': "mpaas.aliyuncs.com",
            'ap-northeast-1': "mpaas.aliyuncs.com",
            'ap-northeast-2-pop': "mpaas.aliyuncs.com",
            'ap-south-1': "mpaas.aliyuncs.com",
            'ap-southeast-1': "mpaas.aliyuncs.com",
            'ap-southeast-2': "mpaas.aliyuncs.com",
            'ap-southeast-3': "mpaas.aliyuncs.com",
            'ap-southeast-5': "mpaas.aliyuncs.com",
            'cn-beijing': "mpaas.aliyuncs.com",
            'cn-beijing-finance-1': "mpaas.aliyuncs.com",
            'cn-beijing-finance-pop': "mpaas.aliyuncs.com",
            'cn-beijing-gov-1': "mpaas.aliyuncs.com",
            'cn-beijing-nu16-b01': "mpaas.aliyuncs.com",
            'cn-chengdu': "mpaas.aliyuncs.com",
            'cn-edge-1': "mpaas.aliyuncs.com",
            'cn-fujian': "mpaas.aliyuncs.com",
            'cn-haidian-cm12-c01': "mpaas.aliyuncs.com",
            'cn-hangzhou-bj-b01': "mpaas.aliyuncs.com",
            'cn-hangzhou-finance': "mpaas.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "mpaas.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "mpaas.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "mpaas.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "mpaas.aliyuncs.com",
            'cn-hangzhou-test-306': "mpaas.aliyuncs.com",
            'cn-hongkong': "mpaas.aliyuncs.com",
            'cn-hongkong-finance-pop': "mpaas.aliyuncs.com",
            'cn-huhehaote': "mpaas.aliyuncs.com",
            'cn-north-2-gov-1': "mpaas.aliyuncs.com",
            'cn-qingdao': "mpaas.aliyuncs.com",
            'cn-qingdao-nebula': "mpaas.aliyuncs.com",
            'cn-shanghai': "mpaas.aliyuncs.com",
            'cn-shanghai-et15-b01': "mpaas.aliyuncs.com",
            'cn-shanghai-et2-b01': "mpaas.aliyuncs.com",
            'cn-shanghai-finance-1': "mpaas.aliyuncs.com",
            'cn-shanghai-inner': "mpaas.aliyuncs.com",
            'cn-shanghai-internal-test-1': "mpaas.aliyuncs.com",
            'cn-shenzhen': "mpaas.aliyuncs.com",
            'cn-shenzhen-finance-1': "mpaas.aliyuncs.com",
            'cn-shenzhen-inner': "mpaas.aliyuncs.com",
            'cn-shenzhen-st4-d01': "mpaas.aliyuncs.com",
            'cn-shenzhen-su18-b01': "mpaas.aliyuncs.com",
            'cn-wuhan': "mpaas.aliyuncs.com",
            'cn-yushanfang': "mpaas.aliyuncs.com",
            'cn-zhangbei-na61-b01': "mpaas.aliyuncs.com",
            'cn-zhangjiakou': "mpaas.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "mpaas.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "mpaas.aliyuncs.com",
            'eu-central-1': "mpaas.aliyuncs.com",
            'eu-west-1': "mpaas.aliyuncs.com",
            'eu-west-1-oxs': "mpaas.aliyuncs.com",
            'me-east-1': "mpaas.aliyuncs.com",
            'rus-west-1-pop': "mpaas.aliyuncs.com",
            'us-east-1': "mpaas.aliyuncs.com",
            'us-west-1': "mpaas.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("mpaas", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    async updateMpaasAppInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("UpdateMpaasAppInfo", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new UpdateMpaasAppInfoResponse({}));
    }
    async updateMpaasAppInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateMpaasAppInfoWithOptions(request, runtime);
    }
    async runMsaDiffWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("RunMsaDiff", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new RunMsaDiffResponse({}));
    }
    async runMsaDiff(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.runMsaDiffWithOptions(request, runtime);
    }
    async createMsaEnhanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMsaEnhance", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMsaEnhanceResponse({}));
    }
    async createMsaEnhance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMsaEnhanceWithOptions(request, runtime);
    }
    async queryMPaaSMasTinyAppDailyDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMPaaSMasTinyAppDailyData", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMPaaSMasTinyAppDailyDataResponse({}));
    }
    async queryMPaaSMasTinyAppDailyData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMPaaSMasTinyAppDailyDataWithOptions(request, runtime);
    }
    async queryMPaaSMasTinyAppHistoryDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMPaaSMasTinyAppHistoryData", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMPaaSMasTinyAppHistoryDataResponse({}));
    }
    async queryMPaaSMasTinyAppHistoryData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMPaaSMasTinyAppHistoryDataWithOptions(request, runtime);
    }
    async queryMPaaSMasTinyAppDailyPageViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMPaaSMasTinyAppDailyPageView", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMPaaSMasTinyAppDailyPageViewResponse({}));
    }
    async queryMPaaSMasTinyAppDailyPageView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMPaaSMasTinyAppDailyPageViewWithOptions(request, runtime);
    }
    async listMPaaSMasTinyAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMPaaSMasTinyApp", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMPaaSMasTinyAppResponse({}));
    }
    async listMPaaSMasTinyApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMPaaSMasTinyAppWithOptions(request, runtime);
    }
    async listMappCenterAppsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMappCenterApps", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMappCenterAppsResponse({}));
    }
    async listMappCenterApps(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMappCenterAppsWithOptions(request, runtime);
    }
    async listMappCenterWorkspacesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMappCenterWorkspaces", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMappCenterWorkspacesResponse({}));
    }
    async listMappCenterWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMappCenterWorkspacesWithOptions(request, runtime);
    }
    async queryMappCenterAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMappCenterApp", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMappCenterAppResponse({}));
    }
    async queryMappCenterApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMappCenterAppWithOptions(request, runtime);
    }
    async exportMappCenterAppConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ExportMappCenterAppConfig", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ExportMappCenterAppConfigResponse({}));
    }
    async exportMappCenterAppConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.exportMappCenterAppConfigWithOptions(request, runtime);
    }
    async deleteMpaasMrtcArtvcRecordfileWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("DeleteMpaasMrtcArtvcRecordfile", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new DeleteMpaasMrtcArtvcRecordfileResponse({}));
    }
    async deleteMpaasMrtcArtvcRecordfile(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteMpaasMrtcArtvcRecordfileWithOptions(request, runtime);
    }
    async queryMpaasMrtcArtvcRecordfileWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMpaasMrtcArtvcRecordfile", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMpaasMrtcArtvcRecordfileResponse({}));
    }
    async queryMpaasMrtcArtvcRecordfile(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMpaasMrtcArtvcRecordfileWithOptions(request, runtime);
    }
    async listMcubeMiniTasksWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMcubeMiniTasks", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMcubeMiniTasksResponse({}));
    }
    async listMcubeMiniTasks(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMcubeMiniTasksWithOptions(request, runtime);
    }
    async listMcubeMiniPackagesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMcubeMiniPackages", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMcubeMiniPackagesResponse({}));
    }
    async listMcubeMiniPackages(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMcubeMiniPackagesWithOptions(request, runtime);
    }
    async getMcubeFileTokenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("GetMcubeFileToken", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new GetMcubeFileTokenResponse({}));
    }
    async getMcubeFileToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getMcubeFileTokenWithOptions(request, runtime);
    }
    async updateMcubeWhitelistWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("UpdateMcubeWhitelist", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new UpdateMcubeWhitelistResponse({}));
    }
    async updateMcubeWhitelist(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateMcubeWhitelistWithOptions(request, runtime);
    }
    async deleteMcubeWhitelistWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("DeleteMcubeWhitelist", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new DeleteMcubeWhitelistResponse({}));
    }
    async deleteMcubeWhitelist(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteMcubeWhitelistWithOptions(request, runtime);
    }
    async createMcubeMiniTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMcubeMiniTask", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMcubeMiniTaskResponse({}));
    }
    async createMcubeMiniTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMcubeMiniTaskWithOptions(request, runtime);
    }
    async existMcubeRsaKeyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ExistMcubeRsaKey", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ExistMcubeRsaKeyResponse({}));
    }
    async existMcubeRsaKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.existMcubeRsaKeyWithOptions(request, runtime);
    }
    async uploadMcubeMiniPackageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("UploadMcubeMiniPackage", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new UploadMcubeMiniPackageResponse({}));
    }
    async uploadMcubeMiniPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.uploadMcubeMiniPackageWithOptions(request, runtime);
    }
    async queryMcubeMiniTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMcubeMiniTask", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMcubeMiniTaskResponse({}));
    }
    async queryMcubeMiniTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMcubeMiniTaskWithOptions(request, runtime);
    }
    async queryMcubeMiniPackageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMcubeMiniPackage", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMcubeMiniPackageResponse({}));
    }
    async queryMcubeMiniPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMcubeMiniPackageWithOptions(request, runtime);
    }
    async uploadMcubeRsaKeyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("UploadMcubeRsaKey", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new UploadMcubeRsaKeyResponse({}));
    }
    async uploadMcubeRsaKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.uploadMcubeRsaKeyWithOptions(request, runtime);
    }
    async deleteMcubeMiniAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("DeleteMcubeMiniApp", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new DeleteMcubeMiniAppResponse({}));
    }
    async deleteMcubeMiniApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteMcubeMiniAppWithOptions(request, runtime);
    }
    async createMcubeWhitelistWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMcubeWhitelist", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMcubeWhitelistResponse({}));
    }
    async createMcubeWhitelist(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMcubeWhitelistWithOptions(request, runtime);
    }
    async createMcubeWhitelistForIdeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMcubeWhitelistForIde", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMcubeWhitelistForIdeResponse({}));
    }
    async createMcubeWhitelistForIde(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMcubeWhitelistForIdeWithOptions(request, runtime);
    }
    async changeMcubeMiniTaskStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ChangeMcubeMiniTaskStatus", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ChangeMcubeMiniTaskStatusResponse({}));
    }
    async changeMcubeMiniTaskStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.changeMcubeMiniTaskStatusWithOptions(request, runtime);
    }
    async createMcubeVhostWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMcubeVhost", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMcubeVhostResponse({}));
    }
    async createMcubeVhost(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMcubeVhostWithOptions(request, runtime);
    }
    async createMcubeMiniAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateMcubeMiniApp", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateMcubeMiniAppResponse({}));
    }
    async createMcubeMiniApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createMcubeMiniAppWithOptions(request, runtime);
    }
    async queryMcubeVhostWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMcubeVhost", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMcubeVhostResponse({}));
    }
    async queryMcubeVhost(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMcubeVhostWithOptions(request, runtime);
    }
    async listMcubeMiniAppsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMcubeMiniApps", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMcubeMiniAppsResponse({}));
    }
    async listMcubeMiniApps(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMcubeMiniAppsWithOptions(request, runtime);
    }
    async listMcubeWhitelistsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMcubeWhitelists", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMcubeWhitelistsResponse({}));
    }
    async listMcubeWhitelists(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMcubeWhitelistsWithOptions(request, runtime);
    }
    async createOpenSingleDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateOpenSingleData", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateOpenSingleDataResponse({}));
    }
    async createOpenSingleData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOpenSingleDataWithOptions(request, runtime);
    }
    async createOpenGlobalDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("CreateOpenGlobalData", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new CreateOpenGlobalDataResponse({}));
    }
    async createOpenGlobalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOpenGlobalDataWithOptions(request, runtime);
    }
    async pushSimpleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("PushSimple", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new PushSimpleResponse({}));
    }
    async pushSimple(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pushSimpleWithOptions(request, runtime);
    }
    async pushBroadcastWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("PushBroadcast", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new PushBroadcastResponse({}));
    }
    async pushBroadcast(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pushBroadcastWithOptions(request, runtime);
    }
    async pushTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("PushTemplate", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new PushTemplateResponse({}));
    }
    async pushTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pushTemplateWithOptions(request, runtime);
    }
    async pushMultipleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("PushMultiple", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new PushMultipleResponse({}));
    }
    async pushMultiple(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pushMultipleWithOptions(request, runtime);
    }
    async listMcdpAimWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMcdpAim", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMcdpAimResponse({}));
    }
    async listMcdpAim(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMcdpAimWithOptions(request, runtime);
    }
    async saveMgsApirestWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("SaveMgsApirest", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new SaveMgsApirestResponse({}));
    }
    async saveMgsApirest(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.saveMgsApirestWithOptions(request, runtime);
    }
    async queryMgsTestreqbodyautogenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMgsTestreqbodyautogen", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMgsTestreqbodyautogenResponse({}));
    }
    async queryMgsTestreqbodyautogen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMgsTestreqbodyautogenWithOptions(request, runtime);
    }
    async queryMgsApirestWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMgsApirest", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMgsApirestResponse({}));
    }
    async queryMgsApirest(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMgsApirestWithOptions(request, runtime);
    }
    async listMgsApiWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("ListMgsApi", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new ListMgsApiResponse({}));
    }
    async listMgsApi(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listMgsApiWithOptions(request, runtime);
    }
    async queryMgsApipageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        return $tea.cast(await this.doRequest("QueryMgsApipage", "HTTPS", "POST", "2019-08-21", "AK", null, $tea.toMap(request), runtime), new QueryMgsApipageResponse({}));
    }
    async queryMgsApipage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMgsApipageWithOptions(request, runtime);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map